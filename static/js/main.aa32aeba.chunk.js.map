{"version":3,"sources":["components/Navbar.js","pages/DashboardPage.js","../../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../../src/funtions/apiFn/index.js","../../src/funtions/actionsFn/index.js","../../src/funtions/reducersFn/index.js","actions/postsActions.js","components/CustomModal.js","components/Post.js","pages/PostsPage.js","actions/postActions.js","actions/commentsActions.js","components/Comment.js","pages/SinglePostPage.js","App.js","reducers/postsReducer.js","reducers/postReducer.js","reducers/commentsReducer.js","reducers/index.js","configureStore.js","index.js"],"names":["Navbar","to","DashboardPage","className","Symbol","iterator","asyncIterator","_catch","body","recover","result","e","then","fetchApi","api","method","url","params","config","console","response","path","isEmpty","replacePath","getWithParamsUrl","res","axios","error","prepareActions","val","newVal","createActions","dispatchActionsWithApi","data","dataFns","name","dispatchPrepareActions","index","partsKeys","keys","dispatch","has","actionsCondition","reducerMap","initialState","key","stateKey","initStateKey","setState","value","newAction","next","state","action","payload","handleActions","setPayload","log","JSON","stringify","headers","id","getPostsAction","addPostAction","updatePostAction","deletePostAction","CustomModal","children","modalIsOpen","toggleModal","isOpen","onRequestClose","overlayClassName","contentLabel","Post","post","excerpt","useDispatch","useSelector","posts","loadingUpdatePost","React","useState","setIsOpen","title","setTitle","setBody","useEffect","substring","onClick","type","onChange","target","required","PostsPage","loadingGetPosts","loadingAddPost","style","display","width","justifyContent","length","userId","map","getPostByIdAction","getCommentsAction","Comment","comment","email","SinglePostPage","match","loadingGetPostById","postById","loading","loadingGetComments","comments","postId","App","exact","component","postsReducer","anotherActions","filter","postReducer","commentsReducer","rootReducer","combineReducers","persistConfig","storage","middlewares","thunkMiddleware","persistedReducer","persistReducer","store","md","applyMiddleware","createStore","persistor","persistStore","configureStore","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa32aeba.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const Navbar = () => (\r\n  <nav>\r\n    <section>\r\n      <Link to=\"/\">Dashboard</Link>\r\n      <Link to=\"/posts\">Posts</Link>\r\n    </section>\r\n  </nav>\r\n)\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst DashboardPage = () => (\r\n  <section>\r\n    <h1>Dashboard</h1>\r\n    <p>This is the dashboard.</p>\r\n    <Link to=\"/posts\" className=\"button\">\r\n      View Posts\r\n    </Link>\r\n  </section>\r\n)\r\n\r\nexport default DashboardPage\r\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import axios from 'axios'\r\nimport { isEmpty } from 'lodash'\r\n\r\nconst getWithParamsUrl = (path, params) => {\r\n  const regex = /\\[(.*?)\\]/g\r\n  let index = 0\r\n  let replacePath\r\n  if (!isEmpty(params)) {\r\n    replacePath = path.replace(regex, (match, name, surname) => {\r\n      let replaceStr = `${params[name]}`\r\n      index = index + 1\r\n      return replaceStr\r\n    })\r\n  } else {\r\n    replacePath = path\r\n  }\r\n\r\n  return replacePath\r\n}\r\n\r\nconst getApi = async ({ api, url, params, config }) => {\r\n  let response = null\r\n  let path = getWithParamsUrl(url, params)\r\n  let res = null\r\n  try {\r\n    if (!isEmpty(api)) {\r\n      isEmpty(config)\r\n        ? (res = await api.get(path))\r\n        : (res = await api.get(path, config))\r\n    } else {\r\n      isEmpty(config)\r\n        ? (res = await axios.get(path))\r\n        : (res = await axios.get(path, config))\r\n    }\r\n\r\n    response = res.data\r\n  } catch (err) {\r\n    console.log(err)\r\n  }\r\n  return response\r\n}\r\n\r\nconst postApi = async ({ api, url, params, body, config }) => {\r\n  let response = null\r\n  let path = getWithParamsUrl(url, params)\r\n  let res = null\r\n  try {\r\n    if (!isEmpty(api)) {\r\n      isEmpty(config)\r\n        ? (res = await api.post(path, body, config))\r\n        : (res = await api.post(path, body))\r\n    } else {\r\n      isEmpty(config)\r\n        ? (res = await axios.post(path, body, config))\r\n        : (res = await axios.post(path, body))\r\n    }\r\n\r\n    response = res.data\r\n  } catch (err) {\r\n    console.log(err)\r\n  }\r\n  return response\r\n}\r\n\r\nconst putApi = async ({ api, url, params, body, config }) => {\r\n  let response = null\r\n  let path = getWithParamsUrl(url, params)\r\n  let res = null\r\n  try {\r\n    if (!isEmpty(api)) {\r\n      isEmpty(config)\r\n        ? (res = await api.put(path, body, config))\r\n        : (res = await api.put(path, body))\r\n    } else {\r\n      isEmpty(config)\r\n        ? (res = await api.put(path, body, config))\r\n        : (res = await api.put(path, body))\r\n    }\r\n\r\n    response = res.data\r\n  } catch (err) {\r\n    console.log(err)\r\n  }\r\n  return response\r\n}\r\n\r\nconst deleteApi = async ({ api, url, params, config }) => {\r\n  let response = null\r\n  let path = getWithParamsUrl(url, params)\r\n  let res = null\r\n  try {\r\n    if (!isEmpty(api)) {\r\n      isEmpty(config)\r\n        ? (res = await api.delete(path))\r\n        : (res = await api.delete(path, config))\r\n    } else {\r\n      isEmpty(config)\r\n        ? (res = await axios.delete(path))\r\n        : (res = await axios.delete(path, config))\r\n    }\r\n\r\n    response = res.data\r\n  } catch (err) {\r\n    console.log(err)\r\n  }\r\n  return response\r\n}\r\n\r\nconst fetchApi = async ({ api, method, url, params, body, config }) => {\r\n  method = method.toLowerCase()\r\n  let error = null\r\n  let response = null\r\n  let path = getWithParamsUrl(url, params)\r\n  let res = null\r\n  try {\r\n    if (method === 'get' || method === 'delete') {\r\n      if (!isEmpty(api)) {\r\n        isEmpty(config)\r\n          ? (res = await api[method](path))\r\n          : (res = await api[method](path, config))\r\n      } else {\r\n        isEmpty(config)\r\n          ? (res = await axios[method](path))\r\n          : (res = await axios[method](path, config))\r\n      }\r\n\r\n      response = res\r\n    } else if (method === 'post' || method === 'put') {\r\n      if (!isEmpty(api)) {\r\n        isEmpty(config)\r\n          ? (res = await api[method](path, body, config))\r\n          : (res = await api[method](path, body))\r\n      } else {\r\n        isEmpty(config)\r\n          ? (res = await axios[method](path, body, config))\r\n          : (res = await axios[method](path, body))\r\n      }\r\n\r\n      response = res\r\n    } else {\r\n      console.error('Ensure your method please')\r\n    }\r\n  } catch (err) {\r\n    error = err\r\n    console.log(err)\r\n  }\r\n  console.log('responseresponse', response)\r\n  return response\r\n}\r\nexport { fetchApi, getApi, postApi, putApi, deleteApi }\r\n","import { createActions } from 'redux-actions'\r\nimport { keys, has, isEmpty } from 'lodash'\r\nimport { fetchApi } from '../apiFn'\r\n\r\nexport const prepareActions = (val) => {\r\n  const newVal = val.replace(/[A-Z]/g, (m) => '_' + m).toUpperCase()\r\n  return createActions(\r\n    `START_LOADING_${newVal}`,\r\n    `${newVal}`,\r\n    `STOP_LOADING_${newVal}`,\r\n    `ERROR_${newVal}`\r\n  )\r\n}\r\nexport const dispatchActions = (data) => {\r\n  let dataFns = {}\r\n  data?.map((val) => {\r\n    const dispatchPrepareActions = prepareActions(val?.name)\r\n    const slice = 4\r\n    let index = 0\r\n    while (index < keys(dispatchPrepareActions).length) {\r\n      const partsKeys = keys(dispatchPrepareActions).splice(index, slice)\r\n      dataFns = {\r\n        ...dataFns,\r\n        [`${val?.name}Action`]: (data = {}) => async (dispatch) => {\r\n          dispatch(dispatchPrepareActions[partsKeys[0]](true))\r\n          try {\r\n            has(val, 'setPayload')\r\n              ? dispatch(\r\n                  dispatchPrepareActions[partsKeys[1]](val.setPayload(data))\r\n                )\r\n              : dispatch(dispatchPrepareActions[partsKeys[1]](data))\r\n            dispatch(dispatchPrepareActions[partsKeys[2]](false))\r\n          } catch (error) {\r\n            dispatch(dispatchPrepareActions[partsKeys[2]](false))\r\n            dispatch(dispatchPrepareActions[partsKeys[3]](error))\r\n          }\r\n        }\r\n      }\r\n      index = index + slice\r\n    }\r\n  })\r\n\r\n  return dataFns\r\n}\r\nexport const dispatchActionsWithApi = (data) => {\r\n  let dataFns = {}\r\n  data?.map((val) => {\r\n    const { api, name, url, method, config } = val\r\n    const dispatchPrepareActions = prepareActions(name)\r\n    const slice = 4\r\n    let index = 0\r\n    //val = val.charAt(0).toUpperCase() + val.slice(1);\r\n    while (index < keys(dispatchPrepareActions).length) {\r\n      const partsKeys = keys(dispatchPrepareActions).splice(index, slice)\r\n      dataFns = {\r\n        ...dataFns,\r\n        [`${name}Action`]: (data) => async (dispatch) => {\r\n          let res\r\n          dispatch(dispatchPrepareActions[partsKeys[0]](true))\r\n          try {\r\n            if (!isEmpty(api)) {\r\n              has(data, 'params')\r\n                ? (res = await fetchApi({\r\n                    api: api,\r\n                    method,\r\n                    url,\r\n                    params: data?.params,\r\n                    body: has(data, 'body') && method == 'get' ? '' : data.body,\r\n                    config\r\n                  }))\r\n                : (res = await fetchApi({\r\n                    api: api,\r\n                    method,\r\n                    url,\r\n                    body: method == 'get' ? '' : data,\r\n                    config\r\n                  }))\r\n            } else {\r\n              has(data, 'params')\r\n                ? (res = await fetchApi({\r\n                    method,\r\n                    url,\r\n                    params: data?.params,\r\n                    body: has(data, 'body') && method == 'get' ? '' : data.body,\r\n                    config\r\n                  }))\r\n                : (res = await fetchApi({\r\n                    method,\r\n                    url,\r\n                    body: method == 'get' ? '' : data,\r\n                    config\r\n                  }))\r\n            }\r\n            has(val, 'setPayload')\r\n              ? dispatch(\r\n                  dispatchPrepareActions[partsKeys[1]](\r\n                    val?.setPayload({ data, res })\r\n                  )\r\n                )\r\n              : dispatch(dispatchPrepareActions[partsKeys[1]](res.data))\r\n\r\n            dispatch(dispatchPrepareActions[partsKeys[2]](false))\r\n          } catch (error) {\r\n            dispatch(dispatchPrepareActions[partsKeys[2]](false))\r\n            dispatch(dispatchPrepareActions[partsKeys[3]](error))\r\n          }\r\n        }\r\n      }\r\n      index = index + slice\r\n    }\r\n  })\r\n  return dataFns\r\n}\r\n\r\n/* export const dispatchActionsWithGet = (data, API_URL) => {\r\n  const dispatchActions = prepareActions(data);\r\n  let dataFns = {};\r\n  const slice = 3;\r\n  data.map((val) => {\r\n    let index = 0;\r\n    let array = [];\r\n    val.split(\"_\").map((val) => {\r\n      array = [...array, val.charAt(0).toUpperCase() + val.slice(1)];\r\n    });\r\n    //val = val.charAt(0).toUpperCase() + val.slice(1);\r\n    while (index < keys(dispatchActions).length) {\r\n      const partsKeys = keys(dispatchActions).splice(index, slice);\r\n      dataFns = {\r\n        ...dataFns,\r\n        [`fetch${array.join(\"\")}`]: () => async (dispatch) => {\r\n          dispatch(dispatchActions[partsKeys[0]]());\r\n          await api\r\n            .get(API_URL)\r\n            .then((res) => {\r\n              console.log(res.data);\r\n              dispatch(dispatchActions[partsKeys[1]](res.data));\r\n            })\r\n            .catch((err) => {\r\n              dispatch(dispatchActions[partsKeys[2]](err.message));\r\n            });\r\n        },\r\n      };\r\n      index = index + slice;\r\n    }\r\n  });\r\n\r\n  console.log(dataFns, \"fffffffffff\");\r\n  return dataFns;\r\n}; */\r\n/* export const dispatchActionsWithGetById = (data) => {\r\n  const dispatchActions = prepareActions(data);\r\n  let dataFns = {};\r\n  const slice = 3;\r\n  data.map((val) => {\r\n    let index = 0;\r\n    let array = [];\r\n    val.split(\"_\").map((val) => {\r\n      array = [...array, val.charAt(0).toUpperCase() + val.slice(1)];\r\n    });\r\n    //val = val.charAt(0).toUpperCase() + val.slice(1);\r\n    while (index < keys(dispatchActions).length) {\r\n      const partsKeys = keys(dispatchActions).splice(index, slice);\r\n      dataFns = {\r\n        ...dataFns,\r\n        [`fetch${array.join(\"\")}`]: (API_URL) => async (dispatch) => {\r\n          dispatch(dispatchActions[partsKeys[0]]());\r\n          await api\r\n            .get(API_URL)\r\n            .then((res) => {\r\n              dispatch(dispatchActions[partsKeys[1]](res.data));\r\n            })\r\n            .catch((err) => {\r\n              dispatch(dispatchActions[partsKeys[2]](err.message));\r\n            });\r\n        },\r\n      };\r\n      index = index + slice;\r\n    }\r\n  });\r\n  return dataFns;\r\n};\r\n */\r\n","import { has } from 'lodash'\r\nimport { handleActions } from 'redux-actions'\r\n\r\nexport const actionsCondition = (data) => {\r\n  let reducerMap = {}\r\n  let initialState = {}\r\n  data.map(async (val) => {\r\n    const { key, stateKey, initStateKey, setState } = val\r\n    const newVal = key.replace(/[A-Z]/g, (m) => '_' + m).toUpperCase()\r\n\r\n    /****** Initial State ******  */\r\n\r\n    initialState = {\r\n      ...initialState,\r\n      [stateKey]: {\r\n        ...initialState[stateKey],\r\n        data: initStateKey,\r\n        [`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: false,\r\n        [`error${key.charAt(0).toUpperCase() + key.slice(1)}`]: ''\r\n      }\r\n    }\r\n    if (has(val, 'anotherActions')) {\r\n      val?.anotherActions.map((value) => {\r\n        initialState = {\r\n          ...initialState,\r\n          [stateKey]: {\r\n            ...initialState[stateKey],\r\n            [`loading${\r\n              value?.key.charAt(0).toUpperCase() + value?.key.slice(1)\r\n            }`]: false,\r\n            [`error${\r\n              value?.key.charAt(0).toUpperCase() + value?.key.slice(1)\r\n            }`]: ''\r\n          }\r\n          // [`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: false\r\n        }\r\n      })\r\n    }\r\n    /***** End initial State ****** */\r\n    if (has(val, 'anotherActions')) {\r\n      val.anotherActions.map((value) => {\r\n        const newAction = value?.key\r\n          .replace(/[A-Z]/g, (m) => '_' + m)\r\n          .toUpperCase()\r\n        reducerMap = {\r\n          ...reducerMap,\r\n          [newAction]: {\r\n            next: (state, action) => {\r\n              if (has(value, 'setState')) {\r\n                return {\r\n                  ...state,\r\n                  [stateKey]: {\r\n                    ...state[stateKey],\r\n                    data: value?.setState(state[stateKey], action)\r\n                  }\r\n                }\r\n              } else {\r\n                return {\r\n                  ...state,\r\n                  [stateKey]: { ...state[stateKey], data: action?.payload }\r\n                }\r\n              }\r\n            }\r\n          },\r\n          [`START_LOADING_${newAction}`]: {\r\n            next: (state, action) => {\r\n              return {\r\n                ...state,\r\n                [stateKey]: {\r\n                  ...state[stateKey],\r\n                  [`loading${\r\n                    value?.key.charAt(0).toUpperCase() + value?.key.slice(1)\r\n                  }`]: true\r\n                }\r\n                // [`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: true\r\n              }\r\n            }\r\n          },\r\n          [`STOP_LOADING_${newAction}`]: {\r\n            next: (state, action) => {\r\n              return {\r\n                ...state,\r\n                [stateKey]: {\r\n                  ...state[stateKey],\r\n                  [`loading${\r\n                    value?.key.charAt(0).toUpperCase() + value?.key.slice(1)\r\n                  }`]: false\r\n                }\r\n                //[`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: false\r\n              }\r\n            }\r\n          },\r\n          [`ERROR_${newAction}`]: {\r\n            next: (state, action) => {\r\n              return {\r\n                ...state,\r\n                [stateKey]: {\r\n                  ...state[stateKey],\r\n                  [`error${\r\n                    value?.key.charAt(0).toUpperCase() + value?.key.slice(1)\r\n                  }`]: action.payload\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      })\r\n    }\r\n    reducerMap = {\r\n      ...reducerMap,\r\n      [newVal]: {\r\n        next: (state, action) => {\r\n          if (has(val, 'setState')) {\r\n            return {\r\n              ...state,\r\n              [stateKey]: {\r\n                ...state[stateKey],\r\n                data: setState(state[stateKey], action)\r\n              }\r\n            }\r\n          } else {\r\n            return {\r\n              ...state,\r\n              [stateKey]: { ...state[stateKey], data: action?.payload }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      [`START_LOADING_${newVal}`]: {\r\n        next: (state, action) => {\r\n          return {\r\n            ...state,\r\n            [stateKey]: {\r\n              ...state[stateKey],\r\n              [`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: true\r\n            }\r\n            // [`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: true\r\n          }\r\n        }\r\n      },\r\n      [`STOP_LOADING_${newVal}`]: {\r\n        next: (state, action) => {\r\n          return {\r\n            ...state,\r\n            [stateKey]: {\r\n              ...state[stateKey],\r\n              [`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: false\r\n            }\r\n            //[`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: false\r\n          }\r\n        }\r\n      },\r\n      [`ERROR_${newVal}`]: {\r\n        next: (state, action) => {\r\n          return {\r\n            ...state,\r\n            [stateKey]: {\r\n              ...state[stateKey],\r\n              [`error${\r\n                key.charAt(0).toUpperCase() + key.slice(1)\r\n              }`]: action.payload\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  return handleActions(reducerMap, initialState)\r\n}\r\n/* export const loadData =(key)=>(state, action) => {\r\n   return { \r\n        ...state,\r\n        [key]: action.payload\r\n    }\r\n}; */\r\n","import { dispatchActionsWithApi } from 'easy-redux'\r\n\r\n/* *** without easy-redux *** */\r\n/* export const GET_POSTS = 'GET POSTS'\r\nexport const START_LOADING_GET_POSTS = 'START_LOADING_GET_POSTS'\r\nexport const STOP_LOADING_GET_POSTS = 'STOP_LOADING_GET_POSTS'\r\n\r\nexport const startLoadingPosts = () => ({\r\n  type: START_LOADING_GET_POSTS,\r\n  payload: true\r\n})\r\nexport const stopLoadingPosts = () => ({\r\n  type: STOP_LOADING_GET_POSTS,\r\n  payload: true\r\n})\r\nexport const getPosts = (posts) => ({\r\n  type: GET_POSTS,\r\n  payload: posts\r\n})\r\n\r\nexport function getPostsAction() {\r\n  return async (dispatch) => {\r\n    dispatch(startLoadingPosts())\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:7071/posts')\r\n      const data = await response.json()\r\n\r\n      dispatch(getPosts(data))\r\n    } catch (error) {\r\n      dispatch(stopLoadingPosts())\r\n    }\r\n    dispatch(stopLoadingPosts())\r\n  }\r\n} */\r\n/* Became To like this */\r\n/* *** with easy-redux *** */\r\nconst API_POSTS_URL = 'http://localhost:7071/posts'\r\nconst API_POSTS_UPDATE_URL = 'http://localhost:7071/posts/[id]'\r\nconst API_POSTS_DELETE_URL = 'http://localhost:7071/posts/[id]'\r\nexport const {\r\n  getPostsAction,\r\n  addPostAction,\r\n  updatePostAction,\r\n  deletePostAction\r\n} = dispatchActionsWithApi([\r\n  {\r\n    name: 'getPosts',\r\n    url: API_POSTS_URL,\r\n    method: 'get',\r\n    setPayload: ({ data, res }) => {\r\n      console.log('data', JSON.stringify(res.data))\r\n      return res.data\r\n    }\r\n  },\r\n  {\r\n    name: 'addPost',\r\n    url: API_POSTS_URL,\r\n    method: 'POST',\r\n    setPayload: ({ data, res }) => {\r\n      console.log('data', { data, res })\r\n      return res.data\r\n    },\r\n    config: {\r\n      headers: {\r\n        'Content-type': 'application/json'\r\n      }\r\n    }\r\n  },\r\n  {\r\n    name: 'updatePost',\r\n    url: API_POSTS_UPDATE_URL,\r\n    method: 'PUT',\r\n    setPayload: ({ data, res }) => {\r\n      console.log('data', { data, res })\r\n      return res.data\r\n    },\r\n    config: {\r\n      headers: {\r\n        'Content-type': 'application/json'\r\n      }\r\n    }\r\n  },\r\n  {\r\n    name: 'deletePost',\r\n    url: API_POSTS_DELETE_URL,\r\n    method: 'DELETE',\r\n    setPayload: ({ data, res }) => {\r\n      console.log('delete', { data, res })\r\n      return data.params.id\r\n    },\r\n    config: {\r\n      headers: {\r\n        'Content-type': 'application/json'\r\n      }\r\n    }\r\n  }\r\n])\r\n","import React from 'react'\r\nimport Modal from 'react-modal'\r\n\r\nfunction CustomModal({ children, modalIsOpen, toggleModal }) {\r\n  return (\r\n    <Modal\r\n      isOpen={modalIsOpen}\r\n      onRequestClose={toggleModal}\r\n      className='mymodal'\r\n      overlayClassName='myoverlay'\r\n      contentLabel='Example Modal'\r\n    >\r\n      {children}\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default CustomModal\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { deletePostAction, updatePostAction } from '../actions/postsActions'\r\nimport '../assets/style.css'\r\nimport CustomModal from './CustomModal'\r\n\r\nexport const Post = ({ post, excerpt }) => {\r\n  const dispatch = useDispatch()\r\n  const loadingUpdatePost = useSelector(\r\n    (state) => state.posts?.posts?.loadingUpdatePost\r\n  )\r\n  const [modalIsOpen, setIsOpen] = React.useState(false)\r\n  const [title, setTitle] = React.useState(post?.title)\r\n  const [body, setBody] = React.useState(post?.body)\r\n\r\n  function openModal() {\r\n    setIsOpen(true)\r\n  }\r\n\r\n  const updatePost = () => {\r\n    dispatch(\r\n      updatePostAction({\r\n        body: { title, body },\r\n        params: { id: post?.id }\r\n      })\r\n    )\r\n    setIsOpen(false)\r\n  }\r\n  function toggleModal() {\r\n    setIsOpen(!modalIsOpen)\r\n  }\r\n  useEffect(() => {\r\n    setBody(post?.body)\r\n    setTitle(post?.title)\r\n  }, [post?.title, post?.body])\r\n  return (\r\n    <>\r\n      <article className={excerpt ? 'post-excerpt' : 'post'}>\r\n        <h2>{post?.title}</h2>\r\n        <p>{excerpt ? post?.body.substring(0, 100) : post?.body}</p>\r\n\r\n        {excerpt && (\r\n          <>\r\n            <Link to={`/posts/${post?.id}`} className='button'>\r\n              View\r\n            </Link>\r\n            <div className='button' onClick={openModal}>\r\n              Update\r\n            </div>\r\n            <div\r\n              className='button'\r\n              onClick={() => {\r\n                dispatch(\r\n                  deletePostAction({\r\n                    params: { id: post?.id }\r\n                  })\r\n                )\r\n              }}\r\n            >\r\n              Delete\r\n            </div>\r\n          </>\r\n        )}\r\n      </article>\r\n      <CustomModal\r\n        modalIsOpen={modalIsOpen}\r\n        toggleModal={toggleModal}\r\n        contentLabel='Example Modal'\r\n      >\r\n        <form>\r\n          <h1>Update Post #{post?.id}</h1>\r\n          <label>\r\n            Title:\r\n            <input\r\n              name='title'\r\n              type='text'\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n              required\r\n            />\r\n          </label>\r\n          <label>\r\n            Body:\r\n            <textarea\r\n              name='body'\r\n              type='text'\r\n              value={body}\r\n              onChange={(e) => setBody(e.target.value)}\r\n              required\r\n            />\r\n          </label>\r\n          <button className='button' onClick={updatePost}>\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </CustomModal>\r\n    </>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { getPostsAction, addPostAction } from '../actions/postsActions'\r\nimport CustomModal from '../components/CustomModal'\r\n\r\nimport { Post } from '../components/Post'\r\n\r\nconst PostsPage = () => {\r\n  const dispatch = useDispatch()\r\n  const loadingGetPosts = useSelector(\r\n    (state) => state.posts?.posts?.loadingGetPosts\r\n  )\r\n  const loadingAddPost = useSelector(\r\n    (state) => state.posts?.posts?.loadingAddPost\r\n  )\r\n  const posts = useSelector((state) => state.posts.posts?.data)\r\n  const [modalIsOpen, setIsOpen] = React.useState(false)\r\n  const [title, setTitle] = React.useState('')\r\n  const [body, setBody] = React.useState('')\r\n  useEffect(() => {\r\n    dispatch(getPostsAction())\r\n  }, [dispatch])\r\n  const addPost = () => {\r\n    dispatch(\r\n      addPostAction({\r\n        title,\r\n        body,\r\n        userId: 1\r\n      })\r\n    )\r\n    setIsOpen(false)\r\n    setTitle('')\r\n    setBody('')\r\n  }\r\n  const renderPosts = () => {\r\n    if (loadingGetPosts) return <p>Loading posts...</p>\r\n    return posts?.map((post) => <Post key={post.id} post={post} excerpt />)\r\n  }\r\n  function openModal() {\r\n    setIsOpen(true)\r\n  }\r\n  function toggleModal() {\r\n    setIsOpen(!modalIsOpen)\r\n  }\r\n  return (\r\n    <section>\r\n      <h1>Posts</h1>\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          width: '100%',\r\n          justifyContent: 'space-between'\r\n        }}\r\n      >\r\n        <p>\r\n          <strong>Total:{posts?.length}</strong>\r\n        </p>\r\n        <button className='button' onClick={openModal}>\r\n          {loadingAddPost ? '...Loading' : 'Add Post'}\r\n        </button>\r\n        <CustomModal\r\n          modalIsOpen={modalIsOpen}\r\n          contentLabel='Example Modal'\r\n          toggleModal={toggleModal}\r\n        >\r\n          <form>\r\n            <h1>Add Post</h1>\r\n            <label>\r\n              Title:\r\n              <input\r\n                name='title'\r\n                type='text'\r\n                value={title}\r\n                onChange={(e) => setTitle(e.target.value)}\r\n                required\r\n              />\r\n            </label>\r\n            <label>\r\n              Body:\r\n              <textarea\r\n                name='body'\r\n                type='text'\r\n                value={body}\r\n                onChange={(e) => setBody(e.target.value)}\r\n                required\r\n              />\r\n            </label>\r\n            <button className='button' onClick={addPost}>\r\n              Submit\r\n            </button>\r\n          </form>\r\n        </CustomModal>\r\n      </div>\r\n      {renderPosts()}\r\n    </section>\r\n  )\r\n}\r\n\r\n/* const mapStateToProps = (state) => ({\r\n  loading: state.posts.loading,\r\n  posts: state.posts.posts,\r\n  hasErrors: state.posts.hasErrors\r\n}) */\r\n\r\nexport default PostsPage\r\n","import { dispatchActionsWithApi } from 'easy-redux'\r\n\r\n/* *** without easy-redux *** */\r\n/* export const GET_POST = 'GET POST'\r\nexport const START_LOADING_GET_POST = 'START_LOADING_GET_POST'\r\nexport const STOP_LOADING_GET_POST = 'STOP_LOADING_GET_POST'\r\n\r\nexport const startLoadingPost = () => ({\r\n  type: START_LOADING_GET_POST,\r\n  payload: true\r\n})\r\nexport const stopLoadingPost = () => ({\r\n  type: STOP_LOADING_GET_POST,\r\n  payload: false\r\n})\r\nexport const getPost = (post) => ({\r\n  type: GET_POST,\r\n  payload: post\r\n})\r\n\r\nexport function getPostAction(id) {\r\n  return async (dispatch) => {\r\n    dispatch(startLoadingPost())\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `https://jsonplaceholder.typicode.com/posts/${id}`\r\n      )\r\n      const data = await response.json()\r\n\r\n      dispatch(getPost(data))\r\n    } catch (error) {\r\n      dispatch(stopLoadingPost())\r\n    }\r\n    dispatch(stopLoadingPost())\r\n  }\r\n} */\r\n/* Became To like this */\r\n/* *** with easy-redux *** */\r\nconst API_POST_BY_ID_URL = `http://localhost:7071/posts/[id]`\r\nexport const { getPostByIdAction } = dispatchActionsWithApi([\r\n  {\r\n    name: 'getPostById',\r\n    url: API_POST_BY_ID_URL,\r\n    method: 'get',\r\n    config: {\r\n      headers: {\r\n        //Authorization: 'Your Token' // if you have token\r\n      }\r\n    },\r\n    setPayload: ({ data, res }) => {\r\n      console.log('data', JSON.stringify(res.data))\r\n      return res.data\r\n    },\r\n    stateKey: 'postById',\r\n    initStateKey: {},\r\n    setState: (post, action) => {\r\n      console.log({ post, action })\r\n      return { ...action.payload }\r\n    }\r\n  }\r\n])\r\n","import { dispatchActionsWithApi } from 'easy-redux'\r\n\r\n/* *** without easy-redux *** */\r\n/* \r\n\r\nexport const GET_COMMENTS = 'GET_COMMENTS'\r\nexport const START_LOADING_GET_COMMENTS = 'START_LOADING_GET_COMMENTS'\r\nexport const STOP_LOADING_GET_COMMENTS = 'STOP_LOADING_GET_COMMENTS'\r\nexport const startLoadingComments = () => ({\r\n  type: START_LOADING_GET_COMMENTS,\r\n  payload: true\r\n})\r\nexport const stopLoadingComments = () => ({\r\n  type: STOP_LOADING_GET_COMMENTS,\r\n  payload: true\r\n})\r\nexport const getComments = (comments) => ({\r\n  type: GET_COMMENTS,\r\n  payload: comments\r\n})\r\n\r\nexport function getCommentsAction(postId) {\r\n  return async (dispatch) => {\r\n    dispatch(startLoadingComments())\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `https://jsonplaceholder.typicode.com/comments?postId=${postId}`\r\n      )\r\n      const data = await response.json()\r\n\r\n      dispatch(getComments(data))\r\n    } catch (error) {\r\n      dispatch(stopLoadingComments())\r\n    }\r\n    dispatch(stopLoadingComments())\r\n  }\r\n} */\r\n/* Became To like this */\r\n/* *** with easy-redux *** */\r\nconst API_COMMENTS_URL = `http://localhost:7071/comments?postId=[postId]`\r\nexport const { getCommentsAction } = dispatchActionsWithApi([\r\n  {\r\n    name: 'getComments',\r\n    url: API_COMMENTS_URL,\r\n    method: 'get'\r\n  }\r\n])\r\n","import React from 'react'\r\n\r\nexport const Comment = ({ comment }) => (\r\n  <aside className=\"comment\">\r\n    <h2>{comment.title}</h2>\r\n    <h3>{comment.email}</h3>\r\n    <p>{comment.body}</p>\r\n  </aside>\r\n)\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { getPostByIdAction } from '../actions/postActions'\r\nimport { getCommentsAction } from '../actions/commentsActions'\r\n\r\nimport { Post } from '../components/Post'\r\nimport { Comment } from '../components/Comment'\r\n\r\nconst SinglePostPage = ({ match }) => {\r\n  const dispatch = useDispatch()\r\n  const { loadingGetPostById, loadingGetComments } = useSelector((state) => {\r\n    return {\r\n      loadingGetPostById: state.postById?.postById?.loading,\r\n      loadingGetComments: state.comments?.comments?.loading\r\n    }\r\n  })\r\n  //const state = useSelector((state) => state)\r\n  const postById = useSelector((state) => state.postById.postById?.data)\r\n  const comments = useSelector((state) => state.comments.comments?.data)\r\n  useEffect(() => {\r\n    const { id } = match.params\r\n    /* *** without easy-redux *** */\r\n    //dispatch(getPostByIdAction(id))\r\n    //dispatch(getCommentsAction(id))\r\n    /* *** with easy-redux *** */\r\n    dispatch(getPostByIdAction({ params: { id } }))\r\n    dispatch(getCommentsAction({ params: { postId: id } }))\r\n  }, [dispatch, match])\r\n\r\n  const renderPost = () => {\r\n    if (loadingGetPostById) return <p>Loading post...</p>\r\n    return <Post post={postById} />\r\n  }\r\n\r\n  const renderComments = () => {\r\n    if (loadingGetComments) return <p>Loading comments...</p>\r\n    return comments.map((comment) => (\r\n      <Comment key={comment.id} comment={comment} />\r\n    ))\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      {renderPost()}\r\n      <h2>Comments</h2>\r\n      {renderComments()}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default SinglePostPage\r\n","import React from 'react'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect\r\n} from 'react-router-dom'\r\n\r\nimport { Navbar } from './components/Navbar'\r\nimport DashboardPage from './pages/DashboardPage'\r\nimport PostsPage from './pages/PostsPage'\r\nimport SinglePostPage from './pages/SinglePostPage'\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <Navbar />\r\n      <Switch>\r\n        <Route exact path='/' component={DashboardPage} />\r\n        <Route exact path='/posts' component={PostsPage} />\r\n        <Route exact path='/posts/:id' component={SinglePostPage} />\r\n        {/* <Route exact path='/posts/:id' component={UpdatePostPage} /> */}\r\n        <Redirect to='/' />\r\n      </Switch>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { actionsCondition } from 'easy-redux'\r\n\r\n/* *** without easy-redux *** */\r\n/* import * as actions from '../actions/commentsActions'\r\n\r\nexport const initialState = {\r\n  data: [],\r\n  errorAddPost: \"\",\r\n  errorGetPosts: \"\",\r\n  loadingAddPost: true,\r\n  loadingGetPosts: false\r\n}\r\n\r\nexport default function postsReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case START_LOADING_GET_POSTS:\r\n      return { ...state, loadingGetPosts: true }\r\n    case GET_POSTS:\r\n      return {  ...state,posts: action.payload }\r\n    case STOP_LOADING_GET_POSTS:\r\n      return { ...state, loadingGetPosts: false }\r\n    case ERROR_GET_POSTS:\r\n      return { ...state, errorGetPosts: action.payload }\r\n    case START_LOADING_ADD_POST:\r\n      return { ...state, loadingAddPost: true }\r\n    case ADD_POST:\r\n      return {  ...state,data: [...state.data ,action.payload] }\r\n    case STOP_LOADING_ADD_POST:\r\n      return { ...state, loadingAddPost: false }\r\n    case ERROR_ADD_POST:\r\n      return { ...state, errorAddPost: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n} */\r\n/* *** with easy-redux *** */\r\n\r\n/* ***************** Posts Reducer ***************/\r\n\r\nconst postsReducer = actionsCondition([\r\n  {\r\n    key: 'getPosts',\r\n    stateKey: 'posts',\r\n    initStateKey: [],\r\n    anotherActions: [\r\n      {\r\n        key: 'updatePost',\r\n        setState: (posts, action) => {\r\n          console.log({ posts, action })\r\n          return [\r\n            ...posts?.data.map((post) =>\r\n              post.id === action.payload.id ? action.payload : post\r\n            )\r\n          ]\r\n        }\r\n      },\r\n      {\r\n        key: 'deletePost',\r\n        setState: (posts, action) => {\r\n          console.log({ posts, action })\r\n          return [...posts?.data.filter((post) => post.id !== action.payload)]\r\n        }\r\n      },\r\n      {\r\n        key: 'addPost',\r\n        setState: (posts, action) => {\r\n          console.log({ posts, action })\r\n          return [action.payload, ...posts?.data]\r\n        }\r\n      }\r\n    ]\r\n  }\r\n])\r\n\r\nexport default postsReducer\r\n","import { actionsCondition } from 'easy-redux'\r\n\r\n/* *** without easy-redux *** */\r\n/* import * as actions from '../actions/commentsActions'\r\n\r\nexport const initialState = {\r\n  loadingGetPost: false,\r\n  post: {}\r\n}\r\n\r\nexport default function postReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case actions.START_LOADING_GET_POST:\r\n      return { ...state, loadingGetPost: true }\r\n    case actions.GET_POST:\r\n      return { post: action.payload, loading: false }\r\n    case actions.STOP_LOADING_GET_POST:\r\n      return { ...state, loadingGetPost: false }\r\n    default:\r\n      return state\r\n  }\r\n} */\r\n/* *** with easy-redux *** */\r\n/* ***************** Post Reducer ***************/\r\n\r\nconst postReducer = actionsCondition([\r\n  {\r\n    key: 'getPostById',\r\n    stateKey: 'postById',\r\n    initStateKey: {},\r\n    setState: (post, action) => {\r\n      console.log({ post, action })\r\n      return { ...action.payload }\r\n    }\r\n  }\r\n])\r\n\r\nexport default postReducer\r\n","import { actionsCondition } from 'easy-redux'\r\n\r\n/* *** without easy-redux *** */\r\n/* import * as actions from '../actions/commentsActions'\r\n\r\nexport const initialState = {\r\n  loadingGetComments: false,\r\n  comments: []\r\n}\r\n\r\nexport default function commentsReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case actions.START_LOADING_GET_COMMENTS:\r\n      \r\n      return { ...state, loadingGetComments: true }\r\n    case actions.GET_COMMENTS:\r\n      return { comments: action.payload, loading: false }\r\n    case actions.STOP_LOADING_GET_COMMENTS:\r\n      return { ...state, loadingGetComments: false }\r\n    default:\r\n      return state\r\n  }\r\n} */\r\n\r\n/* *** with easy-redux *** */\r\n/* ***************** Post Reducer ***************/\r\n\r\nconst commentsReducer = actionsCondition([\r\n  { key: 'getComments', stateKey: 'comments', initStateKey: [] }\r\n])\r\n\r\nexport default commentsReducer\r\n","import { combineReducers } from 'redux'\r\n\r\nimport postsReducer from './postsReducer'\r\nimport postReducer from './postReducer'\r\nimport commentsReducer from './commentsReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  posts: postsReducer,\r\n  postById: postReducer,\r\n  comments: commentsReducer\r\n})\r\n\r\nexport default rootReducer\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport rootReducer from './reducers'\r\n\r\n/* const store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n) */\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage: storage\r\n}\r\n\r\nconst middlewares = [thunkMiddleware]\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\nconst store = () => {\r\n  let md = applyMiddleware(...middlewares)\r\n  if (process.env.NODE_ENV === 'development') {\r\n    md = composeWithDevTools(applyMiddleware(...middlewares))\r\n  }\r\n  let store = createStore(persistedReducer, md)\r\n  let persistor = persistStore(store)\r\n  return { store, persistor }\r\n}\r\nexport default store\r\n","import React from 'react'\r\nimport { render } from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\n\r\nimport App from './App'\r\n\r\nimport './index.css'\r\nimport configureStore from './configureStore'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\n\r\nconst { persistor, store } = configureStore()\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <App />\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}