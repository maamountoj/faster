{"version":3,"sources":["components/Navbar.js","pages/DashboardPage.js","../../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../../src/funtions/apiFn/index.js","../../src/funtions/actionsFn/index.js","../../src/funtions/reducersFn/index.js","actions/postsActions.js","components/Post.js","pages/PostsPage.js","actions/postActions.js","actions/commentsActions.js","components/Comment.js","pages/SinglePostPage.js","App.js","reducers/postsReducer.js","reducers/postReducer.js","reducers/commentsReducer.js","reducers/index.js","index.js"],"names":["Navbar","to","DashboardPage","className","Symbol","iterator","asyncIterator","_catch","body","recover","result","e","then","fetchApi","api","method","url","params","config","console","response","path","regex","isEmpty","replacePath","surname","getWithParamsUrl","res","axios","error","prepareActions","val","newVal","createActions","dispatchActionsWithApi","data","dataFns","name","dispatchPrepareActions","index","partsKeys","keys","dispatch","has","actionsCondition","reducerMap","initialState","key","stateKey","initStateKey","setState","value","alert","newAction","next","state","action","payload","handleActions","API_POSTS_URL","getPostsAction","addPostAction","log","Post","post","excerpt","title","substring","id","PostsPage","useDispatch","loadingGetPosts","useSelector","posts","loadingAddPost","useEffect","length","style","borderWidth","onClick","map","getPostAction","headers","Authorization","setPayload","getCommentsAction","Comment","comment","email","SinglePostPage","match","loadingGetPost","loading","loadingGetComments","comments","postId","App","exact","component","postsReducer","anotherActions","postReducer","commentsReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","render","document","getElementById"],"mappings":"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","file":"static/js/main.4ab49fee.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const Navbar = () => (\r\n  <nav>\r\n    <section>\r\n      <Link to=\"/\">Dashboard</Link>\r\n      <Link to=\"/posts\">Posts</Link>\r\n    </section>\r\n  </nav>\r\n)\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst DashboardPage = () => (\r\n  <section>\r\n    <h1>Dashboard</h1>\r\n    <p>This is the dashboard.</p>\r\n    <Link to=\"/posts\" className=\"button\">\r\n      View Posts\r\n    </Link>\r\n  </section>\r\n)\r\n\r\nexport default DashboardPage\r\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import axios from 'axios'\r\nimport { isEmpty } from 'lodash'\r\n\r\nconst getWithParamsUrl = (path, params) => {\r\n  const regex = /\\[(.*?)\\]/g\r\n  let index = 0\r\n  let replacePath\r\n  if (!isEmpty(params)) {\r\n    path.replace(regex, (match, name, surname) =>\r\n      console.log(`${surname}, ${name}`)\r\n    )\r\n    replacePath = path.replace(regex, (match, name, surname) => {\r\n      let replaceStr = `${params[name]}`\r\n      index = index + 1\r\n      return replaceStr\r\n    })\r\n  } else {\r\n    replacePath = path\r\n  }\r\n\r\n  return replacePath\r\n}\r\n\r\nconst getApi = async ({ api, url, params, config }) => {\r\n  let response = null\r\n  let path = getWithParamsUrl(url, params)\r\n  let res = null\r\n  try {\r\n    if (!isEmpty(api)) {\r\n      isEmpty(config)\r\n        ? (res = await api.get(path))\r\n        : (res = await api.get(path, config))\r\n    } else {\r\n      isEmpty(config)\r\n        ? (res = await axios.get(path))\r\n        : (res = await axios.get(path, config))\r\n    }\r\n\r\n    response = res.data\r\n  } catch (err) {\r\n    console.log(err)\r\n  }\r\n  return response\r\n}\r\n\r\nconst postApi = async ({ api, url, params, body, config }) => {\r\n  console.log('postApi')\r\n  let response = null\r\n  let path = getWithParamsUrl(url, params)\r\n  let res = null\r\n  try {\r\n    if (!isEmpty(api)) {\r\n      isEmpty(config)\r\n        ? (res = await api.post(path, body, config))\r\n        : (res = await api.post(path, body))\r\n    } else {\r\n      isEmpty(config)\r\n        ? (res = await axios.post(path, body, config))\r\n        : (res = await axios.post(path, body))\r\n    }\r\n\r\n    response = res.data\r\n  } catch (err) {\r\n    console.log(err)\r\n  }\r\n  return response\r\n}\r\n\r\nconst putApi = async ({ api, url, params, body, config }) => {\r\n  let response = null\r\n  let path = getWithParamsUrl(url, params)\r\n  let res = null\r\n  try {\r\n    if (!isEmpty(api)) {\r\n      isEmpty(config)\r\n        ? (res = await api.put(path, body, config))\r\n        : (res = await api.put(path, body))\r\n    } else {\r\n      isEmpty(config)\r\n        ? (res = await api.put(path, body, config))\r\n        : (res = await api.put(path, body))\r\n    }\r\n\r\n    response = res.data\r\n  } catch (err) {\r\n    console.log(err)\r\n  }\r\n  return response\r\n}\r\n\r\nconst deleteApi = async ({ api, url, params, config }) => {\r\n  let response = null\r\n  let path = getWithParamsUrl(url, params)\r\n  let res = null\r\n  try {\r\n    if (!isEmpty(api)) {\r\n      isEmpty(config)\r\n        ? (res = await api.delete(path))\r\n        : (res = await api.delete(path, config))\r\n    } else {\r\n      isEmpty(config)\r\n        ? (res = await axios.delete(path))\r\n        : (res = await axios.delete(path, config))\r\n    }\r\n\r\n    response = res.data\r\n  } catch (err) {\r\n    console.log(err)\r\n  }\r\n  return response\r\n}\r\n\r\nconst fetchApi = async ({ api, method, url, params, body, config }) => {\r\n  method = method.toLowerCase()\r\n  console.log({ method, url, params, body, config })\r\n  let error = null\r\n  let response = null\r\n  let path = getWithParamsUrl(url, params)\r\n  let res = null\r\n  try {\r\n    if (method === 'get' || method === 'delete') {\r\n      if (!isEmpty(api)) {\r\n        isEmpty(config)\r\n          ? (res = await api[method](path))\r\n          : (res = await api[method](path, config))\r\n      } else {\r\n        isEmpty(config)\r\n          ? (res = await axios[method](path))\r\n          : (res = await axios[method](path, config))\r\n      }\r\n\r\n      response = res\r\n    } else if (method === 'post' || method === 'put') {\r\n      if (!isEmpty(api)) {\r\n        isEmpty(config)\r\n          ? (res = await api[method](path, body, config))\r\n          : (res = await api[method](path, body))\r\n      } else {\r\n        isEmpty(config)\r\n          ? (res = await axios[method](path, body, config))\r\n          : (res = await axios[method](path, body))\r\n      }\r\n\r\n      response = res\r\n    } else {\r\n      console.error('Ensure your method please')\r\n    }\r\n  } catch (err) {\r\n    error = err\r\n    console.log(err)\r\n  }\r\n  console.log('responseresponse', response)\r\n  return response\r\n}\r\nexport { fetchApi, getApi, postApi, putApi, deleteApi }\r\n","import { createActions } from 'redux-actions'\r\nimport { keys, has, isEmpty } from 'lodash'\r\nimport { fetchApi } from '../apiFn'\r\n\r\nexport const prepareActions = (val) => {\r\n  const newVal = val.replace(/[A-Z]/g, (m) => '_' + m).toUpperCase()\r\n  return createActions(\r\n    `START_LOADING_${newVal}`,\r\n    `${newVal}`,\r\n    `STOP_LOADING_${newVal}`,\r\n    `ERROR_${newVal}`\r\n  )\r\n}\r\nexport const dispatchActions = (data) => {\r\n  let dataFns = {}\r\n  data?.map((val) => {\r\n    const dispatchPrepareActions = prepareActions(val?.name)\r\n    const slice = 4\r\n    let index = 0\r\n    while (index < keys(dispatchPrepareActions).length) {\r\n      const partsKeys = keys(dispatchPrepareActions).splice(index, slice)\r\n      dataFns = {\r\n        ...dataFns,\r\n        [`${val?.name}Action`]: (data = {}) => async (dispatch) => {\r\n          console.log(data)\r\n          dispatch(dispatchPrepareActions[partsKeys[0]](true))\r\n          try {\r\n            has(val, 'setPayload')\r\n              ? dispatch(\r\n                  dispatchPrepareActions[partsKeys[1]](val.setPayload(data))\r\n                )\r\n              : dispatch(dispatchPrepareActions[partsKeys[1]](data))\r\n            dispatch(dispatchPrepareActions[partsKeys[2]](false))\r\n          } catch (error) {\r\n            dispatch(dispatchPrepareActions[partsKeys[2]](false))\r\n            dispatch(dispatchPrepareActions[partsKeys[3]](error))\r\n          }\r\n        }\r\n      }\r\n      index = index + slice\r\n    }\r\n  })\r\n\r\n  return dataFns\r\n}\r\nexport const dispatchActionsWithApi = (data) => {\r\n  let dataFns = {}\r\n  data?.map((val) => {\r\n    const { api, name, url, method, config } = val\r\n    const dispatchPrepareActions = prepareActions(name)\r\n    const slice = 4\r\n    let index = 0\r\n    //val = val.charAt(0).toUpperCase() + val.slice(1);\r\n    while (index < keys(dispatchPrepareActions).length) {\r\n      const partsKeys = keys(dispatchPrepareActions).splice(index, slice)\r\n      dataFns = {\r\n        ...dataFns,\r\n        [`${name}Action`]: (data) => async (dispatch) => {\r\n          let res\r\n          dispatch(dispatchPrepareActions[partsKeys[0]](true))\r\n          console.log({ dispatchPrepareActions, partsKeys })\r\n          try {\r\n            if (!isEmpty(api)) {\r\n              has(data, 'params')\r\n                ? (res = await fetchApi({\r\n                    api: api,\r\n                    method,\r\n                    url,\r\n                    params: data?.params,\r\n                    body: has(data, 'body') && method == 'get' ? '' : data.body,\r\n                    config\r\n                  }))\r\n                : (res = await fetchApi({\r\n                    api: api,\r\n                    method,\r\n                    url,\r\n                    body: method == 'get' ? '' : data,\r\n                    config\r\n                  }))\r\n            } else {\r\n              has(data, 'params')\r\n                ? (res = await fetchApi({\r\n                    method,\r\n                    url,\r\n                    params: data?.params,\r\n                    body: has(data, 'body') && method == 'get' ? '' : data.body,\r\n                    config\r\n                  }))\r\n                : (res = await fetchApi({\r\n                    method,\r\n                    url,\r\n                    body: method == 'get' ? '' : data,\r\n                    config\r\n                  }))\r\n            }\r\n            /* console.log(res1);\r\n            const res = await api.post(urlApi, data); */\r\n            has(val, 'setPayload')\r\n              ? dispatch(\r\n                  dispatchPrepareActions[partsKeys[1]](\r\n                    val?.setPayload({ data, res })\r\n                  )\r\n                )\r\n              : dispatch(dispatchPrepareActions[partsKeys[1]](res.data))\r\n\r\n            dispatch(dispatchPrepareActions[partsKeys[2]](false))\r\n          } catch (error) {\r\n            dispatch(dispatchPrepareActions[partsKeys[2]](false))\r\n            dispatch(dispatchPrepareActions[partsKeys[3]](error))\r\n          }\r\n        }\r\n      }\r\n      index = index + slice\r\n    }\r\n  })\r\n  console.log({ dataFns })\r\n  return dataFns\r\n}\r\n\r\n/* export const dispatchActionsWithGet = (data, API_URL) => {\r\n  const dispatchActions = prepareActions(data);\r\n  let dataFns = {};\r\n  const slice = 3;\r\n  data.map((val) => {\r\n    let index = 0;\r\n    let array = [];\r\n    val.split(\"_\").map((val) => {\r\n      array = [...array, val.charAt(0).toUpperCase() + val.slice(1)];\r\n    });\r\n    //val = val.charAt(0).toUpperCase() + val.slice(1);\r\n    while (index < keys(dispatchActions).length) {\r\n      const partsKeys = keys(dispatchActions).splice(index, slice);\r\n      dataFns = {\r\n        ...dataFns,\r\n        [`fetch${array.join(\"\")}`]: () => async (dispatch) => {\r\n          dispatch(dispatchActions[partsKeys[0]]());\r\n          await api\r\n            .get(API_URL)\r\n            .then((res) => {\r\n              console.log(res.data);\r\n              dispatch(dispatchActions[partsKeys[1]](res.data));\r\n            })\r\n            .catch((err) => {\r\n              dispatch(dispatchActions[partsKeys[2]](err.message));\r\n            });\r\n        },\r\n      };\r\n      index = index + slice;\r\n    }\r\n  });\r\n\r\n  console.log(dataFns, \"fffffffffff\");\r\n  return dataFns;\r\n}; */\r\n/* export const dispatchActionsWithGetById = (data) => {\r\n  const dispatchActions = prepareActions(data);\r\n  let dataFns = {};\r\n  const slice = 3;\r\n  data.map((val) => {\r\n    let index = 0;\r\n    let array = [];\r\n    val.split(\"_\").map((val) => {\r\n      array = [...array, val.charAt(0).toUpperCase() + val.slice(1)];\r\n    });\r\n    //val = val.charAt(0).toUpperCase() + val.slice(1);\r\n    while (index < keys(dispatchActions).length) {\r\n      const partsKeys = keys(dispatchActions).splice(index, slice);\r\n      dataFns = {\r\n        ...dataFns,\r\n        [`fetch${array.join(\"\")}`]: (API_URL) => async (dispatch) => {\r\n          dispatch(dispatchActions[partsKeys[0]]());\r\n          await api\r\n            .get(API_URL)\r\n            .then((res) => {\r\n              dispatch(dispatchActions[partsKeys[1]](res.data));\r\n            })\r\n            .catch((err) => {\r\n              dispatch(dispatchActions[partsKeys[2]](err.message));\r\n            });\r\n        },\r\n      };\r\n      index = index + slice;\r\n    }\r\n  });\r\n  return dataFns;\r\n};\r\n */\r\n","import { has } from 'lodash'\r\nimport { handleActions } from 'redux-actions'\r\n\r\nexport const actionsCondition = (data) => {\r\n  let reducerMap = {}\r\n  let initialState = {}\r\n  data.map((val) => {\r\n    const { key, stateKey, initStateKey, setState } = val\r\n    const newVal = key.replace(/[A-Z]/g, (m) => '_' + m).toUpperCase()\r\n\r\n    /****** Initial State ******  */\r\n\r\n    initialState = {\r\n      ...initialState,\r\n      [stateKey]: {\r\n        ...initialState[stateKey],\r\n        data: initStateKey,\r\n        [`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: false,\r\n        [`error${key.charAt(0).toUpperCase() + key.slice(1)}`]: ''\r\n      }\r\n    }\r\n    if (has(val, 'anotherActions')) {\r\n      val?.anotherActions.map((value) => {\r\n        initialState = {\r\n          ...initialState,\r\n          [stateKey]: {\r\n            ...initialState[stateKey],\r\n            [`loading${\r\n              value?.name.charAt(0).toUpperCase() + value?.name.slice(1)\r\n            }`]: false,\r\n            [`error${\r\n              value?.name.charAt(0).toUpperCase() + value?.name.slice(1)\r\n            }`]: ''\r\n          }\r\n          // [`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: false\r\n        }\r\n      })\r\n    }\r\n    /***** End initial State ****** */\r\n    console.log('vallll', val)\r\n    if (has(val, 'anotherActions')) {\r\n      alert('anotherActions')\r\n      console.log('anotherActions', val?.anotherActions)\r\n      val?.anotherActions.map((value) => {\r\n        const newAction = value?.name\r\n          .replace(/[A-Z]/g, (m) => '_' + m)\r\n          .toUpperCase()\r\n        console.log('value?.name', value?.name)\r\n        if (newAction) {\r\n          console.log('newAction', newAction)\r\n          reducerMap = {\r\n            ...reducerMap,\r\n            [newAction]: {\r\n              next: (state, action) => {\r\n                console.log('valueeeee', value)\r\n                if (has(value, 'setState')) {\r\n                  alert('setState', newAction)\r\n                  return {\r\n                    ...state,\r\n                    [stateKey]: {\r\n                      ...state[stateKey],\r\n                      data: setState(state[stateKey], action)\r\n                    }\r\n                  }\r\n                } else {\r\n                  return {\r\n                    ...state,\r\n                    [stateKey]: { ...state[stateKey], data: action?.payload }\r\n                  }\r\n                }\r\n              }\r\n            },\r\n            [`START_LOADING_${newAction}`]: {\r\n              next: (state, action) => {\r\n                alert(`START_LOADING_${newAction}`)\r\n                return {\r\n                  ...state,\r\n                  [stateKey]: {\r\n                    ...state[stateKey],\r\n                    [`loading${\r\n                      value?.name.charAt(0).toUpperCase() + value?.name.slice(1)\r\n                    }`]: true\r\n                  }\r\n                  // [`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: true\r\n                }\r\n              }\r\n            },\r\n            [`STOP_LOADING_${newAction}`]: {\r\n              next: (state, action) => {\r\n                alert(`STOP_LOADING_${newAction}`)\r\n                return {\r\n                  ...state,\r\n                  [stateKey]: {\r\n                    ...state[stateKey],\r\n                    [`loading${\r\n                      value?.name.charAt(0).toUpperCase() + value?.name.slice(1)\r\n                    }`]: false\r\n                  }\r\n                  //[`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: false\r\n                }\r\n              }\r\n            },\r\n            [`ERROR_${newAction}`]: {\r\n              next: (state, action) => {\r\n                return {\r\n                  ...state,\r\n                  [stateKey]: {\r\n                    ...state[stateKey],\r\n                    [`error${\r\n                      value?.name.charAt(0).toUpperCase() + value?.name.slice(1)\r\n                    }`]: action.payload\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      })\r\n    }\r\n    reducerMap = {\r\n      ...reducerMap,\r\n      [newVal]: {\r\n        next: (state, action) => {\r\n          if (has(val, 'setState')) {\r\n            return {\r\n              ...state,\r\n              [stateKey]: {\r\n                ...state[stateKey],\r\n                data: setState(state, action)\r\n              }\r\n            }\r\n          } else {\r\n            return {\r\n              ...state,\r\n              [stateKey]: { ...state[stateKey], data: action?.payload }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      [`START_LOADING_${newVal}`]: {\r\n        next: (state, action) => {\r\n          return {\r\n            ...state,\r\n            [stateKey]: {\r\n              ...state[stateKey],\r\n              [`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: true\r\n            }\r\n            // [`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: true\r\n          }\r\n        }\r\n      },\r\n      [`STOP_LOADING_${newVal}`]: {\r\n        next: (state, action) => {\r\n          return {\r\n            ...state,\r\n            [stateKey]: {\r\n              ...state[stateKey],\r\n              [`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: false\r\n            }\r\n            //[`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: false\r\n          }\r\n        }\r\n      },\r\n      [`ERROR_${newVal}`]: {\r\n        next: (state, action) => {\r\n          return {\r\n            ...state,\r\n            [stateKey]: {\r\n              ...state[stateKey],\r\n              [`error${\r\n                key.charAt(0).toUpperCase() + key.slice(1)\r\n              }`]: action.payload\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  })\r\n  console.log(reducerMap, initialState)\r\n  return handleActions(reducerMap, initialState)\r\n}\r\n/* export const loadData =(key)=>(state, action) => {\r\n   return { \r\n        ...state,\r\n        [key]: action.payload\r\n    }\r\n}; */\r\n","import { dispatchActionsWithApi } from 'fasti-redux'\r\n\r\n/* *** without easy-redux *** */\r\n/* export const GET_POSTS = 'GET POSTS'\r\nexport const START_LOADING_GET_POSTS = 'START_LOADING_GET_POSTS'\r\nexport const STOP_LOADING_GET_POSTS = 'STOP_LOADING_GET_POSTS'\r\n\r\nexport const startLoadingPosts = () => ({\r\n  type: START_LOADING_GET_POSTS,\r\n  payload: true\r\n})\r\nexport const stopLoadingPosts = () => ({\r\n  type: STOP_LOADING_GET_POSTS,\r\n  payload: true\r\n})\r\nexport const getPosts = (posts) => ({\r\n  type: GET_POSTS,\r\n  payload: posts\r\n})\r\n\r\nexport function getPostsAction() {\r\n  return async (dispatch) => {\r\n    dispatch(startLoadingPosts())\r\n\r\n    try {\r\n      const response = await fetch('https://jsonplaceholder.typicode.com/posts')\r\n      const data = await response.json()\r\n\r\n      dispatch(getPosts(data))\r\n    } catch (error) {\r\n      dispatch(stopLoadingPosts())\r\n    }\r\n    dispatch(stopLoadingPosts())\r\n  }\r\n} */\r\n/* Became To like this */\r\n/* *** with easy-redux *** */\r\nconst API_POSTS_URL = 'https://jsonplaceholder.typicode.com/posts'\r\nexport const { getPostsAction, addPostAction } = dispatchActionsWithApi([\r\n  {\r\n    name: 'getPosts',\r\n    url: API_POSTS_URL,\r\n    method: 'get'\r\n  },\r\n  {\r\n    name: 'addPost',\r\n    url: API_POSTS_URL,\r\n    method: 'get'\r\n  }\r\n])\r\nconsole.log(addPostAction())\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const Post = ({ post, excerpt }) => (\r\n  <article className={excerpt ? 'post-excerpt' : 'post'}>\r\n    <h2>{post?.title}</h2>\r\n    <p>{excerpt ? post?.body.substring(0, 100) : post?.body}</p>\r\n\r\n    {excerpt && (\r\n      <Link to={`/posts/${post?.id}`} className='button'>\r\n        View Post\r\n      </Link>\r\n    )}\r\n  </article>\r\n)\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { getPostsAction, addPostAction } from '../actions/postsActions'\r\n\r\nimport { Post } from '../components/Post'\r\n\r\nconst PostsPage = () => {\r\n  const dispatch = useDispatch()\r\n  const loadingGetPosts = useSelector(\r\n    (state) => state.posts?.posts?.loadingGetPosts\r\n  )\r\n  const loadingAddPost = useSelector(\r\n    (state) => state.posts?.posts?.loadingAddPost\r\n  )\r\n  const posts = useSelector((state) => state.posts.posts?.data)\r\n  useEffect(() => {\r\n    dispatch(getPostsAction())\r\n  }, [dispatch])\r\n  const addPost = () => {\r\n    console.log(addPostAction())\r\n    dispatch(addPostAction())\r\n  }\r\n  const renderPosts = () => {\r\n    if (loadingGetPosts) return <p>Loading posts...</p>\r\n    return posts.map((post) => <Post key={post.id} post={post} excerpt />)\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <h1>Posts</h1>\r\n      <strong>{posts?.length}</strong>\r\n      <button\r\n        className='button'\r\n        style={{ borderWidth: 'inherit' }}\r\n        onClick={addPost}\r\n      >\r\n        {loadingAddPost ? '...Loading' : 'Add Post'}\r\n      </button>\r\n      {renderPosts()}\r\n    </section>\r\n  )\r\n}\r\n\r\n/* const mapStateToProps = (state) => ({\r\n  loading: state.posts.loading,\r\n  posts: state.posts.posts,\r\n  hasErrors: state.posts.hasErrors\r\n}) */\r\n\r\nexport default PostsPage\r\n","import { dispatchActionsWithApi } from 'fasti-redux'\r\n\r\n/* *** without easy-redux *** */\r\n/* export const GET_POST = 'GET POST'\r\nexport const START_LOADING_GET_POST = 'START_LOADING_GET_POST'\r\nexport const STOP_LOADING_GET_POST = 'STOP_LOADING_GET_POST'\r\n\r\nexport const startLoadingPost = () => ({\r\n  type: START_LOADING_GET_POST,\r\n  payload: true\r\n})\r\nexport const stopLoadingPost = () => ({\r\n  type: STOP_LOADING_GET_POST,\r\n  payload: false\r\n})\r\nexport const getPost = (post) => ({\r\n  type: GET_POST,\r\n  payload: post\r\n})\r\n\r\nexport function getPostAction(id) {\r\n  return async (dispatch) => {\r\n    dispatch(startLoadingPost())\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `https://jsonplaceholder.typicode.com/posts/${id}`\r\n      )\r\n      const data = await response.json()\r\n\r\n      dispatch(getPost(data))\r\n    } catch (error) {\r\n      dispatch(stopLoadingPost())\r\n    }\r\n    dispatch(stopLoadingPost())\r\n  }\r\n} */\r\n/* Became To like this */\r\n/* *** with easy-redux *** */\r\nconst API_POST_URL = `https://jsonplaceholder.typicode.com/posts/[id]`\r\nexport const { getPostAction } = dispatchActionsWithApi([\r\n  {\r\n    name: 'getPost',\r\n    url: API_POST_URL,\r\n    method: 'get',\r\n    config:{\r\n      headers: {\r\n        Authorization: 'Bearer hjkhjkhjk' //the token is a variable which holds the token\r\n      }\r\n     },\r\n    setPayload:(data)=>{\r\n      console.log(data)\r\n      return data?.res.data\r\n    }\r\n  }\r\n])\r\n","import { dispatchActionsWithApi } from 'fasti-redux'\r\n\r\n/* *** without easy-redux *** */\r\n/* \r\n\r\nexport const GET_COMMENTS = 'GET_COMMENTS'\r\nexport const START_LOADING_GET_COMMENTS = 'START_LOADING_GET_COMMENTS'\r\nexport const STOP_LOADING_GET_COMMENTS = 'STOP_LOADING_GET_COMMENTS'\r\nexport const startLoadingComments = () => ({\r\n  type: START_LOADING_GET_COMMENTS,\r\n  payload: true\r\n})\r\nexport const stopLoadingComments = () => ({\r\n  type: STOP_LOADING_GET_COMMENTS,\r\n  payload: true\r\n})\r\nexport const getComments = (comments) => ({\r\n  type: GET_COMMENTS,\r\n  payload: comments\r\n})\r\n\r\nexport function getCommentsAction(postId) {\r\n  return async (dispatch) => {\r\n    dispatch(startLoadingComments())\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `https://jsonplaceholder.typicode.com/comments?postId=${postId}`\r\n      )\r\n      const data = await response.json()\r\n\r\n      dispatch(getComments(data))\r\n    } catch (error) {\r\n      dispatch(stopLoadingComments())\r\n    }\r\n    dispatch(stopLoadingComments())\r\n  }\r\n} */\r\n/* Became To like this */\r\n/* *** with easy-redux *** */\r\nconst API_COMMENTS_URL = `https://jsonplaceholder.typicode.com/comments?postId=[postId]`\r\nexport const { getCommentsAction } = dispatchActionsWithApi([\r\n  {\r\n    name: 'getComments',\r\n    url: API_COMMENTS_URL,\r\n    method: 'get'\r\n  }\r\n])\r\n","import React from 'react'\r\n\r\nexport const Comment = ({ comment }) => (\r\n  <aside className=\"comment\">\r\n    <h2>{comment.title}</h2>\r\n    <h3>{comment.email}</h3>\r\n    <p>{comment.body}</p>\r\n  </aside>\r\n)\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { getPostAction } from '../actions/postActions'\r\nimport { getCommentsAction } from '../actions/commentsActions'\r\n\r\nimport { Post } from '../components/Post'\r\nimport { Comment } from '../components/Comment'\r\n\r\nconst SinglePostPage = ({ match }) => {\r\n  const dispatch = useDispatch()\r\n  const { loadingGetPost, loadingGetComments } = useSelector((state) => {\r\n    return {\r\n      loadingGetPost: state.post?.post?.loading,\r\n      loadingGetComments: state.comments?.comments?.loading\r\n    }\r\n  })\r\n  const state = useSelector((state) => state)\r\n  const post = useSelector((state) => state.post.post?.data)\r\n  const comments = useSelector((state) => state.comments.comments?.data)\r\n  useEffect(() => {\r\n    const { id } = match.params\r\n    /* *** without easy-redux *** */\r\n    //dispatch(getPostAction(id))\r\n    //dispatch(getCommentsAction(id))\r\n    /* *** with easy-redux *** */\r\n    dispatch(getPostAction({ params: { id } }))\r\n    dispatch(getCommentsAction({ params: { postId: id } }))\r\n  }, [dispatch, match])\r\n\r\n  const renderPost = () => {\r\n    if (loadingGetPost) return <p>Loading post...</p>\r\n    return <Post post={post} />\r\n  }\r\n\r\n  const renderComments = () => {\r\n    if (loadingGetComments) return <p>Loading comments...</p>\r\n    return comments.map((comment) => (\r\n      <Comment key={comment.id} comment={comment} />\r\n    ))\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      {console.log(state)}\r\n      {renderPost()}\r\n      <h2>Comments</h2>\r\n      {renderComments()}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default SinglePostPage\r\n","import React from 'react'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect\r\n} from 'react-router-dom'\r\n\r\nimport { Navbar } from './components/Navbar'\r\nimport DashboardPage from './pages/DashboardPage'\r\nimport PostsPage from './pages/PostsPage'\r\nimport SinglePostPage from './pages/SinglePostPage'\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <Navbar />\r\n      <Switch>\r\n        <Route exact path='/' component={DashboardPage} />\r\n        <Route exact path='/posts' component={PostsPage} />\r\n        <Route exact path='/posts/:id' component={SinglePostPage} />\r\n        <Redirect to='/' />\r\n      </Switch>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { actionsCondition } from 'fasti-redux'\r\n\r\n/* *** without easy-redux *** */\r\n/* import * as actions from '../actions/commentsActions'\r\n\r\nexport const initialState = {\r\n  loadingGetPosts: false,\r\n  posts: []\r\n}\r\n\r\nexport default function postsReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case actions.START_LOADING_GET_POSTS:\r\n      return { ...state, loadingGetPosts: true }\r\n    case actions.GET_POSTS:\r\n      return { posts: action.payload, loading: false }\r\n    case actions.STOP_LOADING_GET_POSTS:\r\n      return { ...state, loadingGetPosts: false }\r\n    default:\r\n      return state\r\n  }\r\n} */\r\n/* *** with easy-redux *** */\r\n\r\n/* ***************** Posts Reducer ***************/\r\n\r\nconst postsReducer = actionsCondition([\r\n  {\r\n    key: 'getPosts',\r\n    stateKey: 'posts',\r\n    initStateKey: [],\r\n    anotherActions: [\r\n      {\r\n        name: 'addPost',\r\n        setState: (posts, action) => {\r\n          console.log({ posts, action })\r\n          console.log('postsnew', [...posts?.data, ...action.payload])\r\n          return [...posts?.data, ...action.payload]\r\n        }\r\n      }\r\n    ]\r\n  }\r\n])\r\n\r\nexport default postsReducer\r\n","import { actionsCondition } from 'fasti-redux'\r\n\r\n/* *** without easy-redux *** */\r\n/* import * as actions from '../actions/commentsActions'\r\n\r\nexport const initialState = {\r\n  loadingGetPost: false,\r\n  post: {}\r\n}\r\n\r\nexport default function postReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case actions.START_LOADING_GET_POST:\r\n      return { ...state, loadingGetPost: true }\r\n    case actions.GET_POST:\r\n      return { post: action.payload, loading: false }\r\n    case actions.STOP_LOADING_GET_POST:\r\n      return { ...state, loadingGetPost: false }\r\n    default:\r\n      return state\r\n  }\r\n} */\r\n/* *** with easy-redux *** */\r\n/* ***************** Post Reducer ***************/\r\n\r\nconst postReducer = actionsCondition([\r\n  { key: 'getPost', stateKey: 'post', initStateKey: {},setState:(state, action)=>{\r\n    console.log({state, action})\r\n    return action.payload\r\n  } }\r\n])\r\n\r\nexport default postReducer\r\n","import { actionsCondition } from 'fasti-redux'\r\n\r\n/* *** without easy-redux *** */\r\n/* import * as actions from '../actions/commentsActions'\r\n\r\nexport const initialState = {\r\n  loadingGetComments: false,\r\n  comments: []\r\n}\r\n\r\nexport default function commentsReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case actions.START_LOADING_GET_COMMENTS:\r\n      \r\n      return { ...state, loadingGetComments: true }\r\n    case actions.GET_COMMENTS:\r\n      return { comments: action.payload, loading: false }\r\n    case actions.STOP_LOADING_GET_COMMENTS:\r\n      return { ...state, loadingGetComments: false }\r\n    default:\r\n      return state\r\n  }\r\n} */\r\n\r\n/* *** with easy-redux *** */\r\n/* ***************** Post Reducer ***************/\r\n\r\nconst commentsReducer = actionsCondition([\r\n  { key: 'getComments', stateKey: 'comments', initStateKey: [] }\r\n])\r\n\r\nexport default commentsReducer\r\n","import { combineReducers } from 'redux'\r\n\r\nimport postsReducer from './postsReducer'\r\nimport postReducer from './postReducer'\r\nimport commentsReducer from './commentsReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  posts: postsReducer,\r\n  post: postReducer,\r\n  comments: commentsReducer,\r\n})\r\n\r\nexport default rootReducer\r\n","import React from 'react'\r\nimport { render } from 'react-dom'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nimport App from './App'\r\nimport rootReducer from './reducers'\r\n\r\nimport './index.css'\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n)\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}