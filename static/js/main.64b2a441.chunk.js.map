{"version":3,"sources":["../../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../../src/funtions/apiFn/index.js","../../src/funtions/actionsFn/index.js","../../src/index.js","../../src/funtions/reducersFn/index.js","App.js","index.js"],"names":["Symbol","iterator","asyncIterator","_catch","body","recover","result","e","then","getWithParamsUrl","path","params","regex","isEmpty","replacePath","console","surname","fetchApi","method","url","config","response","res","axios","error","prepareActions","val","dataActions","newVal","createActions","test","getApi","postApi","putApi","deleteApi","dispatchActions","data","dataFns","index","partsKeys","keys","dispatch","has","dispatchActionsWithApi","name","actionsCondition","reducerMap","initialState","key","stateKey","initStateKey","fn","next","state","action","App","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.64b2a441.chunk.js","sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import axios from \"axios\";\nimport { isEmpty } from \"lodash\";\nconst getWithParamsUrl = (path, params) => {\n  const regex = /\\[(.*?)\\]/g;\n  let index = 0;\n  let replacePath;\n  if (!isEmpty(params)) {\n    path.replace(regex, (match, name, surname) =>\n      console.log(`${surname}, ${name}`)\n    );\n    replacePath = path.replace(regex, (match, name, surname) => {\n      let replaceStr = `${params[name]}`;\n      index = index + 1;\n      return replaceStr;\n    });\n  } else {\n    replacePath = path;\n  }\n\n  return replacePath;\n};\nconst getApi = async ({ url, params, config }) => {\n  let response = null;\n  let path = getWithParamsUrl(url, params);\n  let res = null;\n  try {\n    isEmpty(config)\n      ? (res = await axios.put(path))\n      : (res = await axios.put(path, config));\n    response = res.data;\n  } catch (err) {\n    console.log(err);\n  }\n  return response;\n};\nconst postApi = async ({ url, params, body, config }) => {\n  console.log(\"postApi\");\n  let response = null;\n  let path = getWithParamsUrl(url, params);\n  let res = null;\n  try {\n    isEmpty(config)\n      ? (res = await axios.post(path, body, config))\n      : (res = await axios.post(path, body));\n    response = res.data;\n  } catch (err) {\n    console.log(err);\n  }\n  return response;\n};\nconst putApi = async ({ url, params, body, config }) => {\n  let response = null;\n  let path = getWithParamsUrl(url, params);\n  let res = null;\n  try {\n    isEmpty(config)\n      ? (res = await axios.put(path, body, config))\n      : (res = await axios.put(path, body));\n    response = res.data;\n  } catch (err) {\n    console.log(err);\n  }\n  return response;\n};\nconst deleteApi = async ({ url, params, config }) => {\n  let response = null;\n  let path = getWithParamsUrl(url, params);\n  let res = null;\n  try {\n    isEmpty(config)\n      ? (res = await axios.delete(path))\n      : (res = await axios.delete(path, config));\n    response = res.data;\n  } catch (err) {\n    console.log(err);\n  }\n  return response;\n};\nconst fetchApi = async ({ method, url, params, body, config }) => {\n  method = method.toLowerCase();\n  console.log({ method, url, params, body, config });\n  let error = null;\n  let response = null;\n  let path = getWithParamsUrl(url, params);\n  let res = null;\n  try {\n    if (method === \"get\" || method === \"delete\") {\n      isEmpty(config)\n        ? (res = await axios[method](path))\n        : (res = await axios[method](path, config));\n      response = res.data;\n    } else if (method === \"post\" || method === \"put\") {\n      isEmpty(config)\n        ? (res = await axios[method](path, body, config))\n        : (res = await axios[method](path, body));\n      response = res.data;\n    } else {\n      console.error(\"Ensure your method please\");\n    }\n  } catch (err) {\n    error = err;\n    console.log(err);\n  }\n  console.log(\"responseresponse\", response);\n  return response;\n};\nexport { fetchApi, getApi, postApi, putApi, deleteApi };\n","import { createActions } from \"redux-actions\";\nimport { keys, has } from \"lodash\";\nimport { fetchApi } from \"../apiFn\";\nexport const prepareActions = (val) => {\n  let dataActions = [];\n  const newVal = val.replace(/[A-Z]/g, (m) => \"_\" + m).toUpperCase();\n  dataActions = [\n    ...dataActions,\n    `START_LOADING_${newVal}`,\n    `${newVal}`,\n    `STOP_LOADING_${newVal}`,\n  ];\n  return createActions(...dataActions);\n};\nexport const dispatchActions = (data) => {\n  let dataFns = {};\n  data?.map((val) => {\n    const dispatchActions = prepareActions(val?.name);\n    const slice = 3;\n    let index = 0;\n    while (index < keys(dispatchActions).length) {\n      const partsKeys = keys(dispatchActions).splice(index, slice);\n      dataFns = {\n        ...dataFns,\n        [`${val?.name}Action`]: (data = {}) => async (dispatch) => {\n          console.log(data);\n          /*  console.log(dispatchActions[partsKeys[0]](true));\n          console.log(dispatchActions[partsKeys[1]](fn(data)));\n          console.log(dispatchActions[partsKeys[2]](false)); */\n          dispatch(dispatchActions[partsKeys[0]](true));\n          has(val, \"fn\")\n            ? dispatch(dispatchActions[partsKeys[1]](val.fn(data)))\n            : dispatch(dispatchActions[partsKeys[1]](data));\n          dispatch(dispatchActions[partsKeys[2]](false));\n        },\n      };\n      index = index + slice;\n    }\n  });\n\n  return dataFns;\n};\nexport const dispatchActionsWithApi = (data) => {\n  let dataFns = {};\n  data?.map((val) => {\n    const { name, url, method, config } = val;\n    const dispatchActions = prepareActions(name);\n    const slice = 3;\n    let index = 0;\n    //val = val.charAt(0).toUpperCase() + val.slice(1);\n    while (index < keys(dispatchActions).length) {\n      const partsKeys = keys(dispatchActions).splice(index, slice);\n      dataFns = {\n        ...dataFns,\n        [`${name}Action`]: (data) => async (dispatch) => {\n          let res;\n          dispatch(dispatchActions[partsKeys[0]](true));\n          console.log(data);\n          has(data, \"params\")\n            ? (res = await fetchApi({\n                method,\n                url,\n                params: data?.params,\n                body: has(data, \"body\") && method == \"get\" ? \"\" : data.body,\n                config,\n              }))\n            : (res = await fetchApi({\n                method,\n                url,\n                body: method == \"get\" ? \"\" : data,\n                config,\n              }));\n          /* console.log(res1);\n          const res = await api.post(urlApi, data); */\n          has(val, \"fn\")\n            ? dispatch(dispatchActions[partsKeys[1]](val?.fn({ data, res })))\n            : dispatch(dispatchActions[partsKeys[1]](res));\n\n          dispatch(dispatchActions[partsKeys[2]](false));\n        },\n      };\n      index = index + slice;\n    }\n  });\n\n  return dataFns;\n};\n\n/* export const dispatchActionsWithGet = (data, API_URL) => {\n  const dispatchActions = prepareActions(data);\n  let dataFns = {};\n  const slice = 3;\n  data.map((val) => {\n    let index = 0;\n    let array = [];\n    val.split(\"_\").map((val) => {\n      array = [...array, val.charAt(0).toUpperCase() + val.slice(1)];\n    });\n    //val = val.charAt(0).toUpperCase() + val.slice(1);\n    while (index < keys(dispatchActions).length) {\n      const partsKeys = keys(dispatchActions).splice(index, slice);\n      dataFns = {\n        ...dataFns,\n        [`fetch${array.join(\"\")}`]: () => async (dispatch) => {\n          dispatch(dispatchActions[partsKeys[0]]());\n          await api\n            .get(API_URL)\n            .then((res) => {\n              console.log(res.data);\n              dispatch(dispatchActions[partsKeys[1]](res.data));\n            })\n            .catch((err) => {\n              dispatch(dispatchActions[partsKeys[2]](err.message));\n            });\n        },\n      };\n      index = index + slice;\n    }\n  });\n\n  console.log(dataFns, \"fffffffffff\");\n  return dataFns;\n}; */\n/* export const dispatchActionsWithGetById = (data) => {\n  const dispatchActions = prepareActions(data);\n  let dataFns = {};\n  const slice = 3;\n  data.map((val) => {\n    let index = 0;\n    let array = [];\n    val.split(\"_\").map((val) => {\n      array = [...array, val.charAt(0).toUpperCase() + val.slice(1)];\n    });\n    //val = val.charAt(0).toUpperCase() + val.slice(1);\n    while (index < keys(dispatchActions).length) {\n      const partsKeys = keys(dispatchActions).splice(index, slice);\n      dataFns = {\n        ...dataFns,\n        [`fetch${array.join(\"\")}`]: (API_URL) => async (dispatch) => {\n          dispatch(dispatchActions[partsKeys[0]]());\n          await api\n            .get(API_URL)\n            .then((res) => {\n              dispatch(dispatchActions[partsKeys[1]](res.data));\n            })\n            .catch((err) => {\n              dispatch(dispatchActions[partsKeys[2]](err.message));\n            });\n        },\n      };\n      index = index + slice;\n    }\n  });\n  return dataFns;\n};\n */\n","import {fetchApi, getApi, postApi, putApi, deleteApi } from './funtions/apiFn'\nimport {dispatchActions,dispatchActionsWithApi} from './funtions/actionsFn'\nimport {actionsCondition} from './funtions/reducersFn'\n\n/* export const ExampleComponent = ({ text }) => {\n  return <div className={styles.test}>Example Component: {text}\n  <Ex/>\n  </div>\n} */\nexport default {\n test:'test',\n fetchApi, getApi, postApi, putApi, deleteApi,dispatchActions,dispatchActionsWithApi,\n actionsCondition \n} ","import { has } from \"lodash\";\n\nexport const actionsCondition = (data) => {\n  let reducerMap = {};\n  let initialState = {};\n  data.map((val) => {\n    const { key, stateKey, initStateKey, fn } = val;\n    const newVal = key.replace(/[A-Z]/g, (m) => \"_\" + m).toUpperCase();\n    initialState = {\n      ...initialState,\n      [stateKey]: initStateKey,\n      [`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: false,\n    };\n    reducerMap = {\n      ...reducerMap,\n      [newVal]: {\n        next: (state, action) => {\n          if (has(val, \"fn\")) {\n            return {\n              ...state,\n              [stateKey]: fn(state, action),\n            };\n          } else {\n            return {\n              ...state,\n              [stateKey]: action?.payload,\n            };\n          }\n        },\n      },\n      [`START_LOADING_${newVal}`]: {\n        next: (state, action) => {\n          return {\n            ...state,\n            [`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: true,\n          };\n        },\n      },\n      [`STOP_LOADING_${newVal}`]: {\n        next: (state, action) => {\n          return {\n            ...state,\n            [`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: false,\n          };\n        },\n      },\n    };\n  });\n  return { reducerMap, initialState };\n};\n/* export const loadData =(key)=>(state, action) => {\n   return { \n        ...state,\n        [key]: action.payload\n    }\n}; */\n","import React from 'react'\n\nimport test from 'fasti-redux'\nimport 'fasti-redux/dist/index.css'\n\nconst App = () => {\nreturn <h1>{console.log(test)}</h1>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}