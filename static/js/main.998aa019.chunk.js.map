{"version":3,"sources":["components/Navbar.js","pages/DashboardPage.js","../../src/funtions/apiFn/index.js","../../src/funtions/actionsFn/index.js","../../src/funtions/reducersFn/index.js","actions/postsActions.js","components/Post.js","pages/PostsPage.js","actions/postActions.js","actions/commentsActions.js","components/Comment.js","pages/SinglePostPage.js","App.js","reducers/postsReducer.js","reducers/postReducer.js","reducers/commentsReducer.js","reducers/index.js","index.js"],"names":["Navbar","to","DashboardPage","className","getWithParamsUrl","path","params","regex","isEmpty","replacePath","console","surname","fetchApi","a","config","method","response","url","res","api","axios","prepareActions","val","newVal","m","createActions","dispatchActionsWithApi","data","dataFns","dispatchActions","index","partsKeys","keys","dispatch","has","body","actionsCondition","reducerMap","initialState","setState","key","next","state","action","payload","handleActions","getPostsAction","name","Post","post","excerpt","title","substring","id","PostsPage","useDispatch","loadingGetPosts","useSelector","posts","useEffect","map","getPostAction","headers","Authorization","setPayload","log","getCommentsAction","Comment","comment","email","SinglePostPage","match","loadingGetPost","loadingGetComments","comments","postId","App","exact","component","postsReducer","stateKey","initStateKey","postReducer","commentsReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","render","document","getElementById"],"mappings":"2QAGaA,EAAS,kBACpB,6BACE,iCACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,aACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,YCMSC,EAVO,kBACpB,iCACE,yCACA,qDACA,kBAAC,IAAD,CAAMD,GAAG,SAASE,UAAU,UAA5B,gB,wECJEC,EAAmB,SAACC,EAAMC,GAC9B,IAEA,EAFMC,EAAN,aAgBA,OAbKC,kBAAL,GAUEC,KATAJ,aAAoB,uBAClBK,sBAAeC,EAAfD,aADFL,OAGAI,EAAcJ,EAAA,WAAoB,gBAGhC,MAFiB,GAAH,OAAMC,EAApB,QAQJ,GA4FIM,EAAQ,uCAAG,6CAAAC,EAAA,yDAAO,EAAP,EAAO,MAAP,EAAO,SAAP,EAAO,MAAP,EAAO,SAAP,EAAO,KAAkCC,EAAzC,EAAyCA,OACxDC,EAASA,EAATA,cACAL,YAAY,gCAA6BI,WAErCE,EAAJ,KACIX,EAAOD,EAAiBa,EAA5B,GACIC,EAAJ,KANe,SAQTH,WAAJ,WAAwBA,EARX,oBASNP,kBAAL,GATW,qBAUTA,qBAVS,kCAWQW,KADjBX,GAVS,QAWJU,EAXI,gDAYQC,OAFjBX,GAVS,QAYJU,EAZI,2CAcTV,qBAdS,kCAeQY,OADjBZ,GAdS,QAeJU,EAfI,gDAgBQE,SAFjBZ,GAdS,QAgBJU,EAhBI,eAmBXF,IAnBW,2BAoBFD,YAAJ,QAAyBA,EApBnB,oBAqBNP,kBAAL,GArBW,qBAsBTA,qBAtBS,kCAuBQW,SADjBX,GAtBS,QAuBJU,EAvBI,gDAwBQC,OAFjBX,GAtBS,QAwBJU,EAxBI,2CA0BTV,qBA1BS,kCA2BQY,WADjBZ,GA1BS,QA2BJU,EA3BI,gDA4BQE,SAFjBZ,GA1BS,QA4BJU,EA5BI,eA+BXF,IA/BW,wBAiCXN,2CAjCW,0DAqCbA,kBArCa,eAuCfA,kCAvCe,kBAwCf,GAxCe,0DAAH,sDC5GDW,EAAkBC,YAC7B,IAAMC,EAASD,oBAAuBE,YAAD,MAAO,IAA7BF,KAAf,cACA,OAAOG,YAAc,iBAAD,8CAApB,KAkCWC,EAA0BC,YACrC,IAAIC,EAAJ,GA+DA,OA9DAD,eAAI,IAAJA,UAAWL,YAMT,IANiB,IACX,EAAN,EAAM,MAAN,EAAM,OAAN,EAAM,MAAN,EAAM,OAA0BR,EAAhC,EAAgCA,OAC1Be,EAAkBR,EAAxB,GAEIS,EAAJ,EAJiB,aAOf,IAAMC,EAAYC,2BAJpB,GAKEJ,EAAU,8BAAH,IAEL,wBAAoBD,YAAD,8CAAU,6BAAAd,EAAA,yDAE3BoB,EAASJ,EAAgBE,EAAhBF,KAATI,IACAvB,eACKF,kBAAL,GAJ2B,qBAKzB0B,cAAIP,EAAJO,UALyB,gCAMRtB,EAAS,CACpBO,IADoB,iBAIpBb,OAAM,OAAEqB,QAAF,IAAEA,OAAF,EAAEA,EAJY,OAKpBQ,KAAMD,cAAIP,EAAJO,gBAAqBnB,EAArBmB,GAA4CP,EAL9B,KAMpBb,WAZmB,OAMpBI,EANoB,+CAcRN,EAAS,CACpBO,IADoB,iBAIpBgB,KAAMpB,YAJc,EAKpBD,WAnBmB,QAcpBI,EAdoB,2CAsBzBgB,cAAIP,EAAJO,UAtByB,kCAuBRtB,EAAS,gBAGpBN,OAAM,OAAEqB,QAAF,IAAEA,OAAF,EAAEA,EAHY,OAIpBQ,KAAMD,cAAIP,EAAJO,gBAAqBnB,EAArBmB,GAA4CP,EAJ9B,KAKpBb,WA5BmB,QAuBpBI,EAvBoB,gDA8BRN,EAAS,gBAGpBuB,KAAMpB,YAHc,EAIpBD,WAlCmB,QA8BpBI,EA9BoB,eAuC3BgB,cAAIZ,EAAJY,cACID,EACEJ,EAAgBE,EAAhB,WAA8BT,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAA,WAAgB,QAAQJ,UAExDe,EAASJ,EAAgBE,EAAhBF,IAA8BX,EAJ3CgB,OAMAD,EAASJ,EAAgBE,EAAhBF,KAATI,IA7C2B,4CAAV,yDAgDrBH,GAvDF,GAGOA,EAAQE,kBAAf,QAA6C,OAwD/C,GCrGWI,EAAoBT,YAC/B,IAAIU,EAAJ,GACIC,EAAJ,GA4CA,OA3CAX,OAAUL,YAAQ,IACV,EAAN,EAAM,MAAN,EAAM,WAAN,EAAM,aAA+BiB,EAArC,EAAqCA,SAC/BhB,EAASiB,oBAAuBhB,YAAD,MAAO,IAA7BgB,KAAf,cACAF,EAAe,8BAAH,IAEV,IAFa,EAGb,kBAAWE,0BAA8BA,QAAzC,MAA0D,IAE5DH,EAAa,8BAAH,IAER,IAAU,CACRI,KAAM,cACJ,OAAIP,cAAIZ,EAAR,YACE,2BAAO,GAAP,IAEE,IAAYiB,EAASG,EAAOC,KAG9B,2BAAO,GAAP,IAEE,WAAYA,QAAZ,IAAYA,OAAZ,EAAYA,EAAQC,YAK5B,6BAA6B,CAC3BH,KAAM,cACJ,kCAAO,GAAP,IAEE,kBAAWD,0BAA8BA,QAAzC,MAA0D,MAIhE,4BAA4B,CAC1BC,KAAM,cACJ,kCAAO,GAAP,IAEE,kBAAWD,0BAA8BA,QAAzC,MAA0D,WAM7DK,YAAcR,EAArB,ICXaS,EAAmBpB,EAAuB,CACvD,CACEqB,KAAM,WACN9B,IAJkB,6CAKlBF,OAAQ,SAJG+B,eCnCFE,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAAT,OAClB,6BAAS/C,UAAW+C,EAAU,eAAiB,QAC7C,mCAAKD,QAAL,IAAKA,OAAL,EAAKA,EAAME,OACX,2BAAID,EAAO,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAMd,KAAKiB,UAAU,EAAG,KAA3B,OAAkCH,QAAlC,IAAkCA,OAAlC,EAAkCA,EAAMd,MAElDe,GACC,kBAAC,IAAD,CAAMjD,GAAE,wBAAYgD,QAAZ,IAAYA,OAAZ,EAAYA,EAAMI,IAAMlD,UAAU,UAA1C,eCyBSmD,EA3BG,WAChB,IAAMrB,EAAWsB,cACXC,EAAkBC,aAAY,SAACf,GAAD,OAAWA,EAAMgB,MAAMF,mBACrDE,EAAQD,aAAY,SAACf,GAAD,OAAWA,EAAMgB,MAAMA,SACjDC,qBAAU,WACR1B,EAASa,OACR,CAACb,IAOJ,OACE,iCACE,qCANEuB,EAAwB,+CACrBE,EAAME,KAAI,SAACX,GAAD,OAAU,kBAAC,EAAD,CAAMT,IAAKS,EAAKI,GAAIJ,KAAMA,EAAMC,SAAO,SCuBvDW,EAAkBnC,EAAuB,CACtD,CACEqB,KAAM,UACN9B,IAJc,kDAKdF,OAAQ,MACRD,OAAO,CACLgD,QAAS,CACPC,cAAe,qBAGnBC,WAAW,SAACrC,GAEV,OADAjB,QAAQuD,IAAItC,GACZ,OAAOA,QAAP,IAAOA,OAAP,EAAOA,EAAMT,IAAIS,SAZRkC,cCCAK,EAAsBxC,EAAuB,CAC1D,CACEqB,KAAM,cACN9B,IAJkB,gEAKlBF,OAAQ,SAJGmD,kBCvCFC,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACrB,2BAAOjE,UAAU,WACf,4BAAKiE,EAAQjB,OACb,4BAAKiB,EAAQC,OACb,2BAAID,EAAQjC,QC8CDmC,EA3CQ,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAClBtC,EAAWsB,cADmB,EAEWE,aAAY,SAACf,GAC1D,MAAO,CACL8B,eAAgB9B,EAAMO,KAAKuB,eAC3BC,mBAAoB/B,EAAMgC,SAASD,uBAH/BD,EAF4B,EAE5BA,eAAgBC,EAFY,EAEZA,mBAMlB/B,EAAQe,aAAY,SAACf,GAAD,OAAWA,KAC/BO,EAAOQ,aAAY,SAACf,GAAD,OAAWA,EAAMO,KAAKA,QACzCyB,EAAWjB,aAAY,SAACf,GAAD,OAAWA,EAAMgC,SAASA,YACvDf,qBAAU,WAAO,IACPN,EAAOkB,EAAMjE,OAAb+C,GAKRpB,EAAS4B,EAAc,CAAEvD,OAAQ,CAAE+C,SACnCpB,EAASiC,EAAkB,CAAE5D,OAAQ,CAAEqE,OAAQtB,QAC9C,CAACpB,EAAUsC,IAcd,OACE,iCACG7D,QAAQuD,IAAIvB,GAbX8B,EAAuB,8CACpB,kBAAC,EAAD,CAAMvB,KAAMA,IAcjB,wCAVEwB,EAA2B,kDACxBC,EAASd,KAAI,SAACQ,GAAD,OAClB,kBAAC,EAAD,CAAS5B,IAAK4B,EAAQf,GAAIe,QAASA,SCX1BQ,EAdH,WACV,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACxE,KAAK,IAAIyE,UAAW5E,IACjC,kBAAC,IAAD,CAAO2E,OAAK,EAACxE,KAAK,SAASyE,UAAWxB,IACtC,kBAAC,IAAD,CAAOuB,OAAK,EAACxE,KAAK,aAAayE,UAAWR,IAC1C,kBAAC,IAAD,CAAUrE,GAAG,SCSN8E,EAJM3C,EAAiB,CACpC,CAAEI,IAAK,WAAYwC,SAAU,QAASC,aAAc,MCKvCC,EAPK9C,EAAiB,CACnC,CAAEI,IAAK,UAAWwC,SAAU,OAAQC,aAAc,GAAG1C,SAAS,SAACG,EAAOC,GAEpE,OADAjC,QAAQuD,IAAI,CAACvB,QAAOC,WACbA,EAAOC,YCGHuC,EAJS/C,EAAiB,CACvC,CAAEI,IAAK,cAAewC,SAAU,WAAYC,aAAc,MChB7CG,EANKC,0BAAgB,CAClC3B,MAAOqB,EACP9B,KAAMiC,EACNR,SAAUS,ICGNG,G,MAAQC,sBACZH,EACAI,8BAAoBC,0BAAgBC,QAGtCC,iBACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,W","file":"static/js/main.998aa019.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const Navbar = () => (\r\n  <nav>\r\n    <section>\r\n      <Link to=\"/\">Dashboard</Link>\r\n      <Link to=\"/posts\">Posts</Link>\r\n    </section>\r\n  </nav>\r\n)\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst DashboardPage = () => (\r\n  <section>\r\n    <h1>Dashboard</h1>\r\n    <p>This is the dashboard.</p>\r\n    <Link to=\"/posts\" className=\"button\">\r\n      View Posts\r\n    </Link>\r\n  </section>\r\n)\r\n\r\nexport default DashboardPage\r\n","import axios from 'axios'\r\nimport { isEmpty } from 'lodash'\r\n\r\nconst getWithParamsUrl = (path, params) => {\r\n  const regex = /\\[(.*?)\\]/g\r\n  let index = 0\r\n  let replacePath\r\n  if (!isEmpty(params)) {\r\n    path.replace(regex, (match, name, surname) =>\r\n      console.log(`${surname}, ${name}`)\r\n    )\r\n    replacePath = path.replace(regex, (match, name, surname) => {\r\n      let replaceStr = `${params[name]}`\r\n      index = index + 1\r\n      return replaceStr\r\n    })\r\n  } else {\r\n    replacePath = path\r\n  }\r\n\r\n  return replacePath\r\n}\r\n\r\nconst getApi = async ({ api, url, params, config }) => {\r\n  let response = null\r\n  let path = getWithParamsUrl(url, params)\r\n  let res = null\r\n  try {\r\n    if (!isEmpty(api)) {\r\n      isEmpty(config)\r\n        ? (res = await api.get(path))\r\n        : (res = await api.get(path, config))\r\n    } else {\r\n      isEmpty(config)\r\n        ? (res = await axios.get(path))\r\n        : (res = await axios.get(path, config))\r\n    }\r\n\r\n    response = res.data\r\n  } catch (err) {\r\n    console.log(err)\r\n  }\r\n  return response\r\n}\r\n\r\nconst postApi = async ({ api, url, params, body, config }) => {\r\n  console.log('postApi')\r\n  let response = null\r\n  let path = getWithParamsUrl(url, params)\r\n  let res = null\r\n  try {\r\n    if (!isEmpty(api)) {\r\n      isEmpty(config)\r\n        ? (res = await api.post(path, body, config))\r\n        : (res = await api.post(path, body))\r\n    } else {\r\n      isEmpty(config)\r\n        ? (res = await axios.post(path, body, config))\r\n        : (res = await axios.post(path, body))\r\n    }\r\n\r\n    response = res.data\r\n  } catch (err) {\r\n    console.log(err)\r\n  }\r\n  return response\r\n}\r\n\r\nconst putApi = async ({ api, url, params, body, config }) => {\r\n  let response = null\r\n  let path = getWithParamsUrl(url, params)\r\n  let res = null\r\n  try {\r\n    if (!isEmpty(api)) {\r\n      isEmpty(config)\r\n        ? (res = await api.put(path, body, config))\r\n        : (res = await api.put(path, body))\r\n    } else {\r\n      isEmpty(config)\r\n        ? (res = await api.put(path, body, config))\r\n        : (res = await api.put(path, body))\r\n    }\r\n\r\n    response = res.data\r\n  } catch (err) {\r\n    console.log(err)\r\n  }\r\n  return response\r\n}\r\n\r\nconst deleteApi = async ({ api, url, params, config }) => {\r\n  let response = null\r\n  let path = getWithParamsUrl(url, params)\r\n  let res = null\r\n  try {\r\n    if (!isEmpty(api)) {\r\n      isEmpty(config)\r\n        ? (res = await api.delete(path))\r\n        : (res = await api.delete(path, config))\r\n    } else {\r\n      isEmpty(config)\r\n        ? (res = await axios.delete(path))\r\n        : (res = await axios.delete(path, config))\r\n    }\r\n\r\n    response = res.data\r\n  } catch (err) {\r\n    console.log(err)\r\n  }\r\n  return response\r\n}\r\n\r\nconst fetchApi = async ({ api, method, url, params, body, config }) => {\r\n  method = method.toLowerCase()\r\n  console.log({ method, url, params, body, config })\r\n  let error = null\r\n  let response = null\r\n  let path = getWithParamsUrl(url, params)\r\n  let res = null\r\n  try {\r\n    if (method === 'get' || method === 'delete') {\r\n      if (!isEmpty(api)) {\r\n        isEmpty(config)\r\n          ? (res = await api[method](path))\r\n          : (res = await api[method](path, config))\r\n      } else {\r\n        isEmpty(config)\r\n          ? (res = await axios[method](path))\r\n          : (res = await axios[method](path, config))\r\n      }\r\n\r\n      response = res\r\n    } else if (method === 'post' || method === 'put') {\r\n      if (!isEmpty(api)) {\r\n        isEmpty(config)\r\n          ? (res = await api[method](path, body, config))\r\n          : (res = await api[method](path, body))\r\n      } else {\r\n        isEmpty(config)\r\n          ? (res = await axios[method](path, body, config))\r\n          : (res = await axios[method](path, body))\r\n      }\r\n\r\n      response = res\r\n    } else {\r\n      console.error('Ensure your method please')\r\n    }\r\n  } catch (err) {\r\n    error = err\r\n    console.log(err)\r\n  }\r\n  console.log('responseresponse', response)\r\n  return response\r\n}\r\nexport { fetchApi, getApi, postApi, putApi, deleteApi }\r\n","import { createActions } from 'redux-actions'\r\nimport { keys, has, isEmpty } from 'lodash'\r\nimport { fetchApi } from '../apiFn'\r\n\r\nexport const prepareActions = (val) => {\r\n  const newVal = val.replace(/[A-Z]/g, (m) => '_' + m).toUpperCase()\r\n  return createActions(\r\n    `START_LOADING_${newVal}`,\r\n    `${newVal}`,\r\n    `STOP_LOADING_${newVal}`\r\n  )\r\n}\r\nexport const dispatchActions = (data) => {\r\n  let dataFns = {}\r\n  data?.map((val) => {\r\n    const dispatchActions = prepareActions(val?.name)\r\n    const slice = 3\r\n    let index = 0\r\n    while (index < keys(dispatchActions).length) {\r\n      const partsKeys = keys(dispatchActions).splice(index, slice)\r\n      dataFns = {\r\n        ...dataFns,\r\n        [`${val?.name}Action`]: (data = {}) => async (dispatch) => {\r\n          console.log(data)\r\n          /*  console.log(dispatchActions[partsKeys[0]](true));\r\n          console.log(dispatchActions[partsKeys[1]](fn(data)));\r\n          console.log(dispatchActions[partsKeys[2]](false)); */\r\n          dispatch(dispatchActions[partsKeys[0]](true))\r\n          has(val, 'setPayload')\r\n            ? dispatch(dispatchActions[partsKeys[1]](val.setPayload(data)))\r\n            : dispatch(dispatchActions[partsKeys[1]](data))\r\n          dispatch(dispatchActions[partsKeys[2]](false))\r\n        }\r\n      }\r\n      index = index + slice\r\n    }\r\n  })\r\n\r\n  return dataFns\r\n}\r\nexport const dispatchActionsWithApi = (data) => {\r\n  let dataFns = {}\r\n  data?.map((val) => {\r\n    const { api, name, url, method, config } = val\r\n    const dispatchActions = prepareActions(name)\r\n    const slice = 3\r\n    let index = 0\r\n    //val = val.charAt(0).toUpperCase() + val.slice(1);\r\n    while (index < keys(dispatchActions).length) {\r\n      const partsKeys = keys(dispatchActions).splice(index, slice)\r\n      dataFns = {\r\n        ...dataFns,\r\n        [`${name}Action`]: (data) => async (dispatch) => {\r\n          let res\r\n          dispatch(dispatchActions[partsKeys[0]](true))\r\n          console.log(data)\r\n          if (!isEmpty(api)) {\r\n            has(data, 'params')\r\n              ? (res = await fetchApi({\r\n                  api: api,\r\n                  method,\r\n                  url,\r\n                  params: data?.params,\r\n                  body: has(data, 'body') && method == 'get' ? '' : data.body,\r\n                  config\r\n                }))\r\n              : (res = await fetchApi({\r\n                  api: api,\r\n                  method,\r\n                  url,\r\n                  body: method == 'get' ? '' : data,\r\n                  config\r\n                }))\r\n          } else {\r\n            has(data, 'params')\r\n              ? (res = await fetchApi({\r\n                  method,\r\n                  url,\r\n                  params: data?.params,\r\n                  body: has(data, 'body') && method == 'get' ? '' : data.body,\r\n                  config\r\n                }))\r\n              : (res = await fetchApi({\r\n                  method,\r\n                  url,\r\n                  body: method == 'get' ? '' : data,\r\n                  config\r\n                }))\r\n          }\r\n          /* console.log(res1);\r\n          const res = await api.post(urlApi, data); */\r\n          has(val, 'setPayload')\r\n            ? dispatch(\r\n                dispatchActions[partsKeys[1]](val?.setPayload({ data, res }))\r\n              )\r\n            : dispatch(dispatchActions[partsKeys[1]](res.data))\r\n\r\n          dispatch(dispatchActions[partsKeys[2]](false))\r\n        }\r\n      }\r\n      index = index + slice\r\n    }\r\n  })\r\n\r\n  return dataFns\r\n}\r\n\r\n/* export const dispatchActionsWithGet = (data, API_URL) => {\r\n  const dispatchActions = prepareActions(data);\r\n  let dataFns = {};\r\n  const slice = 3;\r\n  data.map((val) => {\r\n    let index = 0;\r\n    let array = [];\r\n    val.split(\"_\").map((val) => {\r\n      array = [...array, val.charAt(0).toUpperCase() + val.slice(1)];\r\n    });\r\n    //val = val.charAt(0).toUpperCase() + val.slice(1);\r\n    while (index < keys(dispatchActions).length) {\r\n      const partsKeys = keys(dispatchActions).splice(index, slice);\r\n      dataFns = {\r\n        ...dataFns,\r\n        [`fetch${array.join(\"\")}`]: () => async (dispatch) => {\r\n          dispatch(dispatchActions[partsKeys[0]]());\r\n          await api\r\n            .get(API_URL)\r\n            .then((res) => {\r\n              console.log(res.data);\r\n              dispatch(dispatchActions[partsKeys[1]](res.data));\r\n            })\r\n            .catch((err) => {\r\n              dispatch(dispatchActions[partsKeys[2]](err.message));\r\n            });\r\n        },\r\n      };\r\n      index = index + slice;\r\n    }\r\n  });\r\n\r\n  console.log(dataFns, \"fffffffffff\");\r\n  return dataFns;\r\n}; */\r\n/* export const dispatchActionsWithGetById = (data) => {\r\n  const dispatchActions = prepareActions(data);\r\n  let dataFns = {};\r\n  const slice = 3;\r\n  data.map((val) => {\r\n    let index = 0;\r\n    let array = [];\r\n    val.split(\"_\").map((val) => {\r\n      array = [...array, val.charAt(0).toUpperCase() + val.slice(1)];\r\n    });\r\n    //val = val.charAt(0).toUpperCase() + val.slice(1);\r\n    while (index < keys(dispatchActions).length) {\r\n      const partsKeys = keys(dispatchActions).splice(index, slice);\r\n      dataFns = {\r\n        ...dataFns,\r\n        [`fetch${array.join(\"\")}`]: (API_URL) => async (dispatch) => {\r\n          dispatch(dispatchActions[partsKeys[0]]());\r\n          await api\r\n            .get(API_URL)\r\n            .then((res) => {\r\n              dispatch(dispatchActions[partsKeys[1]](res.data));\r\n            })\r\n            .catch((err) => {\r\n              dispatch(dispatchActions[partsKeys[2]](err.message));\r\n            });\r\n        },\r\n      };\r\n      index = index + slice;\r\n    }\r\n  });\r\n  return dataFns;\r\n};\r\n */\r\n","import { has } from 'lodash'\r\nimport { handleActions } from 'redux-actions'\r\n\r\nexport const actionsCondition = (data) => {\r\n  let reducerMap = {}\r\n  let initialState = {}\r\n  data.map((val) => {\r\n    const { key, stateKey, initStateKey, setState } = val\r\n    const newVal = key.replace(/[A-Z]/g, (m) => '_' + m).toUpperCase()\r\n    initialState = {\r\n      ...initialState,\r\n      [stateKey]: initStateKey,\r\n      [`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: false\r\n    }\r\n    reducerMap = {\r\n      ...reducerMap,\r\n      [newVal]: {\r\n        next: (state, action) => {\r\n          if (has(val, 'setState')) {\r\n            return {\r\n              ...state,\r\n              [stateKey]: setState(state, action)\r\n            }\r\n          } else {\r\n            return {\r\n              ...state,\r\n              [stateKey]: action?.payload\r\n            }\r\n          }\r\n        }\r\n      },\r\n      [`START_LOADING_${newVal}`]: {\r\n        next: (state, action) => {\r\n          return {\r\n            ...state,\r\n            [`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: true\r\n          }\r\n        }\r\n      },\r\n      [`STOP_LOADING_${newVal}`]: {\r\n        next: (state, action) => {\r\n          return {\r\n            ...state,\r\n            [`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: false\r\n          }\r\n        }\r\n      }\r\n    }\r\n  })\r\n  return handleActions(reducerMap, initialState)\r\n}\r\n/* export const loadData =(key)=>(state, action) => {\r\n   return { \r\n        ...state,\r\n        [key]: action.payload\r\n    }\r\n}; */\r\n","import { dispatchActionsWithApi } from 'fasti-redux'\r\n\r\n/* *** without easy-redux *** */\r\n/* export const GET_POSTS = 'GET POSTS'\r\nexport const START_LOADING_GET_POSTS = 'START_LOADING_GET_POSTS'\r\nexport const STOP_LOADING_GET_POSTS = 'STOP_LOADING_GET_POSTS'\r\n\r\nexport const startLoadingPosts = () => ({\r\n  type: START_LOADING_GET_POSTS,\r\n  payload: true\r\n})\r\nexport const stopLoadingPosts = () => ({\r\n  type: STOP_LOADING_GET_POSTS,\r\n  payload: true\r\n})\r\nexport const getPosts = (posts) => ({\r\n  type: GET_POSTS,\r\n  payload: posts\r\n})\r\n\r\nexport function getPostsAction() {\r\n  return async (dispatch) => {\r\n    dispatch(startLoadingPosts())\r\n\r\n    try {\r\n      const response = await fetch('https://jsonplaceholder.typicode.com/posts')\r\n      const data = await response.json()\r\n\r\n      dispatch(getPosts(data))\r\n    } catch (error) {\r\n      dispatch(stopLoadingPosts())\r\n    }\r\n    dispatch(stopLoadingPosts())\r\n  }\r\n} */\r\n/* Became To like this */\r\n/* *** with easy-redux *** */\r\nconst API_POSTS_URL = 'https://jsonplaceholder.typicode.com/posts'\r\nexport const { getPostsAction } = dispatchActionsWithApi([\r\n  {\r\n    name: 'getPosts',\r\n    url: API_POSTS_URL,\r\n    method: 'get'\r\n  }\r\n])\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const Post = ({ post, excerpt }) => (\r\n  <article className={excerpt ? 'post-excerpt' : 'post'}>\r\n    <h2>{post?.title}</h2>\r\n    <p>{excerpt ? post?.body.substring(0, 100) : post?.body}</p>\r\n\r\n    {excerpt && (\r\n      <Link to={`/posts/${post?.id}`} className='button'>\r\n        View Post\r\n      </Link>\r\n    )}\r\n  </article>\r\n)\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { getPostsAction } from '../actions/postsActions'\r\n\r\nimport { Post } from '../components/Post'\r\n\r\nconst PostsPage = () => {\r\n  const dispatch = useDispatch()\r\n  const loadingGetPosts = useSelector((state) => state.posts.loadingGetPosts)\r\n  const posts = useSelector((state) => state.posts.posts)\r\n  useEffect(() => {\r\n    dispatch(getPostsAction())\r\n  }, [dispatch])\r\n\r\n  const renderPosts = () => {\r\n    if (loadingGetPosts) return <p>Loading posts...</p>\r\n    return posts.map((post) => <Post key={post.id} post={post} excerpt />)\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <h1>Posts</h1>\r\n      {renderPosts()}\r\n    </section>\r\n  )\r\n}\r\n\r\n/* const mapStateToProps = (state) => ({\r\n  loading: state.posts.loading,\r\n  posts: state.posts.posts,\r\n  hasErrors: state.posts.hasErrors\r\n}) */\r\n\r\nexport default PostsPage\r\n","import { dispatchActionsWithApi } from 'fasti-redux'\r\n\r\n/* *** without easy-redux *** */\r\n/* export const GET_POST = 'GET POST'\r\nexport const START_LOADING_GET_POST = 'START_LOADING_GET_POST'\r\nexport const STOP_LOADING_GET_POST = 'STOP_LOADING_GET_POST'\r\n\r\nexport const startLoadingPost = () => ({\r\n  type: START_LOADING_GET_POST,\r\n  payload: true\r\n})\r\nexport const stopLoadingPost = () => ({\r\n  type: STOP_LOADING_GET_POST,\r\n  payload: false\r\n})\r\nexport const getPost = (post) => ({\r\n  type: GET_POST,\r\n  payload: post\r\n})\r\n\r\nexport function getPostAction(id) {\r\n  return async (dispatch) => {\r\n    dispatch(startLoadingPost())\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `https://jsonplaceholder.typicode.com/posts/${id}`\r\n      )\r\n      const data = await response.json()\r\n\r\n      dispatch(getPost(data))\r\n    } catch (error) {\r\n      dispatch(stopLoadingPost())\r\n    }\r\n    dispatch(stopLoadingPost())\r\n  }\r\n} */\r\n/* Became To like this */\r\n/* *** with easy-redux *** */\r\nconst API_POST_URL = `https://jsonplaceholder.typicode.com/posts/[id]`\r\nexport const { getPostAction } = dispatchActionsWithApi([\r\n  {\r\n    name: 'getPost',\r\n    url: API_POST_URL,\r\n    method: 'get',\r\n    config:{\r\n      headers: {\r\n        Authorization: 'Bearer hjkhjkhjk' //the token is a variable which holds the token\r\n      }\r\n     },\r\n    setPayload:(data)=>{\r\n      console.log(data)\r\n      return data?.res.data\r\n    }\r\n  }\r\n])\r\n","import { dispatchActionsWithApi } from 'fasti-redux'\r\n\r\n/* *** without easy-redux *** */\r\n/* \r\n\r\nexport const GET_COMMENTS = 'GET_COMMENTS'\r\nexport const START_LOADING_GET_COMMENTS = 'START_LOADING_GET_COMMENTS'\r\nexport const STOP_LOADING_GET_COMMENTS = 'STOP_LOADING_GET_COMMENTS'\r\nexport const startLoadingComments = () => ({\r\n  type: START_LOADING_GET_COMMENTS,\r\n  payload: true\r\n})\r\nexport const stopLoadingComments = () => ({\r\n  type: STOP_LOADING_GET_COMMENTS,\r\n  payload: true\r\n})\r\nexport const getComments = (comments) => ({\r\n  type: GET_COMMENTS,\r\n  payload: comments\r\n})\r\n\r\nexport function getCommentsAction(postId) {\r\n  return async (dispatch) => {\r\n    dispatch(startLoadingComments())\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `https://jsonplaceholder.typicode.com/comments?postId=${postId}`\r\n      )\r\n      const data = await response.json()\r\n\r\n      dispatch(getComments(data))\r\n    } catch (error) {\r\n      dispatch(stopLoadingComments())\r\n    }\r\n    dispatch(stopLoadingComments())\r\n  }\r\n} */\r\n/* Became To like this */\r\n/* *** with easy-redux *** */\r\nconst API_COMMENTS_URL = `https://jsonplaceholder.typicode.com/comments?postId=[postId]`\r\nexport const { getCommentsAction } = dispatchActionsWithApi([\r\n  {\r\n    name: 'getComments',\r\n    url: API_COMMENTS_URL,\r\n    method: 'get'\r\n  }\r\n])\r\n","import React from 'react'\r\n\r\nexport const Comment = ({ comment }) => (\r\n  <aside className=\"comment\">\r\n    <h2>{comment.title}</h2>\r\n    <h3>{comment.email}</h3>\r\n    <p>{comment.body}</p>\r\n  </aside>\r\n)\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { getPostAction } from '../actions/postActions'\r\nimport { getCommentsAction } from '../actions/commentsActions'\r\n\r\nimport { Post } from '../components/Post'\r\nimport { Comment } from '../components/Comment'\r\n\r\nconst SinglePostPage = ({ match }) => {\r\n  const dispatch = useDispatch()\r\n  const { loadingGetPost, loadingGetComments } = useSelector((state) => {\r\n    return {\r\n      loadingGetPost: state.post.loadingGetPost,\r\n      loadingGetComments: state.comments.loadingGetComments\r\n    }\r\n  })\r\n  const state = useSelector((state) => state)\r\n  const post = useSelector((state) => state.post.post)\r\n  const comments = useSelector((state) => state.comments.comments)\r\n  useEffect(() => {\r\n    const { id } = match.params\r\n    /* *** without easy-redux *** */\r\n    //dispatch(getPostAction(id))\r\n    //dispatch(getCommentsAction(id))\r\n    /* *** with easy-redux *** */\r\n    dispatch(getPostAction({ params: { id } }))\r\n    dispatch(getCommentsAction({ params: { postId: id } }))\r\n  }, [dispatch, match])\r\n\r\n  const renderPost = () => {\r\n    if (loadingGetPost) return <p>Loading post...</p>\r\n    return <Post post={post} />\r\n  }\r\n\r\n  const renderComments = () => {\r\n    if (loadingGetComments) return <p>Loading comments...</p>\r\n    return comments.map((comment) => (\r\n      <Comment key={comment.id} comment={comment} />\r\n    ))\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      {console.log(state)}\r\n      {renderPost()}\r\n      <h2>Comments</h2>\r\n      {renderComments()}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default SinglePostPage\r\n","import React from 'react'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect\r\n} from 'react-router-dom'\r\n\r\nimport { Navbar } from './components/Navbar'\r\nimport DashboardPage from './pages/DashboardPage'\r\nimport PostsPage from './pages/PostsPage'\r\nimport SinglePostPage from './pages/SinglePostPage'\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <Navbar />\r\n      <Switch>\r\n        <Route exact path='/' component={DashboardPage} />\r\n        <Route exact path='/posts' component={PostsPage} />\r\n        <Route exact path='/posts/:id' component={SinglePostPage} />\r\n        <Redirect to='/' />\r\n      </Switch>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { actionsCondition } from 'fasti-redux'\r\n\r\n/* *** without easy-redux *** */\r\n/* import * as actions from '../actions/commentsActions'\r\n\r\nexport const initialState = {\r\n  loadingGetPosts: false,\r\n  posts: []\r\n}\r\n\r\nexport default function postsReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case actions.START_LOADING_GET_POSTS:\r\n      return { ...state, loadingGetPosts: true }\r\n    case actions.GET_POSTS:\r\n      return { posts: action.payload, loading: false }\r\n    case actions.STOP_LOADING_GET_POSTS:\r\n      return { ...state, loadingGetPosts: false }\r\n    default:\r\n      return state\r\n  }\r\n} */\r\n/* *** with easy-redux *** */\r\n\r\n/* ***************** Posts Reducer ***************/\r\n\r\nconst postsReducer = actionsCondition([\r\n  { key: 'getPosts', stateKey: 'posts', initStateKey: [] }\r\n])\r\n\r\nexport default postsReducer\r\n","import { actionsCondition } from 'fasti-redux'\r\n\r\n/* *** without easy-redux *** */\r\n/* import * as actions from '../actions/commentsActions'\r\n\r\nexport const initialState = {\r\n  loadingGetPost: false,\r\n  post: {}\r\n}\r\n\r\nexport default function postReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case actions.START_LOADING_GET_POST:\r\n      return { ...state, loadingGetPost: true }\r\n    case actions.GET_POST:\r\n      return { post: action.payload, loading: false }\r\n    case actions.STOP_LOADING_GET_POST:\r\n      return { ...state, loadingGetPost: false }\r\n    default:\r\n      return state\r\n  }\r\n} */\r\n/* *** with easy-redux *** */\r\n/* ***************** Post Reducer ***************/\r\n\r\nconst postReducer = actionsCondition([\r\n  { key: 'getPost', stateKey: 'post', initStateKey: {},setState:(state, action)=>{\r\n    console.log({state, action})\r\n    return action.payload\r\n  } }\r\n])\r\n\r\nexport default postReducer\r\n","import { actionsCondition } from 'fasti-redux'\r\n\r\n/* *** without easy-redux *** */\r\n/* import * as actions from '../actions/commentsActions'\r\n\r\nexport const initialState = {\r\n  loadingGetComments: false,\r\n  comments: []\r\n}\r\n\r\nexport default function commentsReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case actions.START_LOADING_GET_COMMENTS:\r\n      \r\n      return { ...state, loadingGetComments: true }\r\n    case actions.GET_COMMENTS:\r\n      return { comments: action.payload, loading: false }\r\n    case actions.STOP_LOADING_GET_COMMENTS:\r\n      return { ...state, loadingGetComments: false }\r\n    default:\r\n      return state\r\n  }\r\n} */\r\n\r\n/* *** with easy-redux *** */\r\n/* ***************** Post Reducer ***************/\r\n\r\nconst commentsReducer = actionsCondition([\r\n  { key: 'getComments', stateKey: 'comments', initStateKey: [] }\r\n])\r\n\r\nexport default commentsReducer\r\n","import { combineReducers } from 'redux'\r\n\r\nimport postsReducer from './postsReducer'\r\nimport postReducer from './postReducer'\r\nimport commentsReducer from './commentsReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  posts: postsReducer,\r\n  post: postReducer,\r\n  comments: commentsReducer,\r\n})\r\n\r\nexport default rootReducer\r\n","import React from 'react'\r\nimport { render } from 'react-dom'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nimport App from './App'\r\nimport rootReducer from './reducers'\r\n\r\nimport './index.css'\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n)\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}