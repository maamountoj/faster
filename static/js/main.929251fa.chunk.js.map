{"version":3,"sources":["components/Navbar.js","pages/DashboardPage.js","../../src/funtions/apiFn/index.js","../../src/funtions/actionsFn/index.js","../../src/funtions/reducersFn/index.js","actions/postsActions.js","components/Post.js","pages/PostsPage.js","actions/postActions.js","actions/commentsActions.js","components/Comment.js","pages/SinglePostPage.js","App.js","reducers/postsReducer.js","reducers/postReducer.js","reducers/commentsReducer.js","reducers/index.js","index.js"],"names":["Navbar","to","DashboardPage","className","getWithParamsUrl","path","params","regex","isEmpty","replacePath","console","surname","fetchApi","a","config","method","response","url","res","api","axios","prepareActions","val","dataActions","newVal","m","createActions","dispatchActionsWithApi","data","dataFns","dispatchActions","index","partsKeys","keys","dispatch","has","body","actionsCondition","reducerMap","initialState","fn","key","next","state","action","payload","handleActions","getPostsAction","name","Post","post","excerpt","title","substring","id","PostsPage","useDispatch","loadingGetPosts","useSelector","posts","useEffect","map","getPostAction","getCommentsAction","Comment","comment","email","SinglePostPage","match","loading","loadingGetPost","comments","postId","log","App","exact","component","postsReducer","stateKey","initStateKey","postReducer","commentsReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","render","document","getElementById"],"mappings":"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","file":"static/js/main.929251fa.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport const Navbar = () => (\n  <nav>\n    <section>\n      <Link to=\"/\">Dashboard</Link>\n      <Link to=\"/posts\">Posts</Link>\n    </section>\n  </nav>\n)\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst DashboardPage = () => (\n  <section>\n    <h1>Dashboard</h1>\n    <p>This is the dashboard.</p>\n    <Link to=\"/posts\" className=\"button\">\n      View Posts\n    </Link>\n  </section>\n)\n\nexport default DashboardPage\n","import axios from 'axios'\nimport { isEmpty } from 'lodash'\n\nconst getWithParamsUrl = (path, params) => {\n  const regex = /\\[(.*?)\\]/g\n  let index = 0\n  let replacePath\n  if (!isEmpty(params)) {\n    path.replace(regex, (match, name, surname) =>\n      console.log(`${surname}, ${name}`)\n    )\n    replacePath = path.replace(regex, (match, name, surname) => {\n      let replaceStr = `${params[name]}`\n      index = index + 1\n      return replaceStr\n    })\n  } else {\n    replacePath = path\n  }\n\n  return replacePath\n}\n\nconst getApi = async ({ api, url, params, config }) => {\n  let response = null\n  let path = getWithParamsUrl(url, params)\n  let res = null\n  try {\n    if (!isEmpty(api)) {\n      isEmpty(config)\n        ? (res = await api.get(path))\n        : (res = await api.get(path, config))\n    } else {\n      isEmpty(config)\n        ? (res = await axios.get(path))\n        : (res = await axios.get(path, config))\n    }\n\n    response = res.data\n  } catch (err) {\n    console.log(err)\n  }\n  return response\n}\n\nconst postApi = async ({ api, url, params, body, config }) => {\n  console.log('postApi')\n  let response = null\n  let path = getWithParamsUrl(url, params)\n  let res = null\n  try {\n    if (!isEmpty(api)) {\n      isEmpty(config)\n        ? (res = await api.post(path, body, config))\n        : (res = await api.post(path, body))\n    } else {\n      isEmpty(config)\n        ? (res = await axios.post(path, body, config))\n        : (res = await axios.post(path, body))\n    }\n\n    response = res.data\n  } catch (err) {\n    console.log(err)\n  }\n  return response\n}\n\nconst putApi = async ({ api, url, params, body, config }) => {\n  let response = null\n  let path = getWithParamsUrl(url, params)\n  let res = null\n  try {\n    if (!isEmpty(api)) {\n      isEmpty(config)\n        ? (res = await api.put(path, body, config))\n        : (res = await api.put(path, body))\n    } else {\n      isEmpty(config)\n        ? (res = await api.put(path, body, config))\n        : (res = await api.put(path, body))\n    }\n\n    response = res.data\n  } catch (err) {\n    console.log(err)\n  }\n  return response\n}\n\nconst deleteApi = async ({ api, url, params, config }) => {\n  let response = null\n  let path = getWithParamsUrl(url, params)\n  let res = null\n  try {\n    if (!isEmpty(api)) {\n      isEmpty(config)\n        ? (res = await api.delete(path))\n        : (res = await api.delete(path, config))\n    } else {\n      isEmpty(config)\n        ? (res = await axios.delete(path))\n        : (res = await axios.delete(path, config))\n    }\n\n    response = res.data\n  } catch (err) {\n    console.log(err)\n  }\n  return response\n}\n\nconst fetchApi = async ({ api, method, url, params, body, config }) => {\n  method = method.toLowerCase()\n  console.log({ method, url, params, body, config })\n  let error = null\n  let response = null\n  let path = getWithParamsUrl(url, params)\n  let res = null\n  try {\n    if (method === 'get' || method === 'delete') {\n      if (!isEmpty(api)) {\n        isEmpty(config)\n          ? (res = await api[method](path))\n          : (res = await api[method](path, config))\n      } else {\n        isEmpty(config)\n          ? (res = await axios[method](path))\n          : (res = await axios[method](path, config))\n      }\n\n      response = res.data\n    } else if (method === 'post' || method === 'put') {\n      if (!isEmpty(api)) {\n        isEmpty(config)\n          ? (res = await api[method](path, body, config))\n          : (res = await api[method](path, body))\n      } else {\n        isEmpty(config)\n          ? (res = await axios[method](path, body, config))\n          : (res = await axios[method](path, body))\n      }\n\n      response = res.data\n    } else {\n      console.error('Ensure your method please')\n    }\n  } catch (err) {\n    error = err\n    console.log(err)\n  }\n  console.log('responseresponse', response)\n  return response\n}\nexport { fetchApi, getApi, postApi, putApi, deleteApi }\n","import { createActions } from 'redux-actions'\nimport { keys, has, isEmpty } from 'lodash'\nimport { fetchApi } from '../apiFn'\n\nexport const prepareActions = (val) => {\n  let dataActions = []\n  const newVal = val.replace(/[A-Z]/g, (m) => '_' + m).toUpperCase()\n  dataActions = [\n    ...dataActions,\n    `START_LOADING_${newVal}`,\n    `${newVal}`,\n    `STOP_LOADING_${newVal}`\n  ]\n  return createActions(...dataActions)\n}\nexport const dispatchActions = (data) => {\n  let dataFns = {}\n  data?.map((val) => {\n    const dispatchActions = prepareActions(val?.name)\n    const slice = 3\n    let index = 0\n    while (index < keys(dispatchActions).length) {\n      const partsKeys = keys(dispatchActions).splice(index, slice)\n      dataFns = {\n        ...dataFns,\n        [`${val?.name}Action`]: (data = {}) => async (dispatch) => {\n          console.log(data)\n          /*  console.log(dispatchActions[partsKeys[0]](true));\n          console.log(dispatchActions[partsKeys[1]](fn(data)));\n          console.log(dispatchActions[partsKeys[2]](false)); */\n          dispatch(dispatchActions[partsKeys[0]](true))\n          has(val, 'fn')\n            ? dispatch(dispatchActions[partsKeys[1]](val.fn(data)))\n            : dispatch(dispatchActions[partsKeys[1]](data))\n          dispatch(dispatchActions[partsKeys[2]](false))\n        }\n      }\n      index = index + slice\n    }\n  })\n\n  return dataFns\n}\nexport const dispatchActionsWithApi = (data) => {\n  let dataFns = {}\n  data?.map((val) => {\n    const { api, name, url, method, config } = val\n    const dispatchActions = prepareActions(name)\n    const slice = 3\n    let index = 0\n    //val = val.charAt(0).toUpperCase() + val.slice(1);\n    while (index < keys(dispatchActions).length) {\n      const partsKeys = keys(dispatchActions).splice(index, slice)\n      dataFns = {\n        ...dataFns,\n        [`${name}Action`]: (data) => async (dispatch) => {\n          let res\n          dispatch(dispatchActions[partsKeys[0]](true))\n          console.log(data)\n          if (!isEmpty(api)) {\n            has(data, 'params')\n              ? (res = await fetchApi({\n                  api: api,\n                  method,\n                  url,\n                  params: data?.params,\n                  body: has(data, 'body') && method == 'get' ? '' : data.body,\n                  config\n                }))\n              : (res = await fetchApi({\n                  api: api,\n                  method,\n                  url,\n                  body: method == 'get' ? '' : data,\n                  config\n                }))\n          } else {\n            has(data, 'params')\n              ? (res = await fetchApi({\n                  method,\n                  url,\n                  params: data?.params,\n                  body: has(data, 'body') && method == 'get' ? '' : data.body,\n                  config\n                }))\n              : (res = await fetchApi({\n                  method,\n                  url,\n                  body: method == 'get' ? '' : data,\n                  config\n                }))\n          }\n          /* console.log(res1);\n          const res = await api.post(urlApi, data); */\n          has(val, 'fn')\n            ? dispatch(dispatchActions[partsKeys[1]](val?.fn({ data, res })))\n            : dispatch(dispatchActions[partsKeys[1]](res))\n\n          dispatch(dispatchActions[partsKeys[2]](false))\n        }\n      }\n      index = index + slice\n    }\n  })\n\n  return dataFns\n}\n\n/* export const dispatchActionsWithGet = (data, API_URL) => {\n  const dispatchActions = prepareActions(data);\n  let dataFns = {};\n  const slice = 3;\n  data.map((val) => {\n    let index = 0;\n    let array = [];\n    val.split(\"_\").map((val) => {\n      array = [...array, val.charAt(0).toUpperCase() + val.slice(1)];\n    });\n    //val = val.charAt(0).toUpperCase() + val.slice(1);\n    while (index < keys(dispatchActions).length) {\n      const partsKeys = keys(dispatchActions).splice(index, slice);\n      dataFns = {\n        ...dataFns,\n        [`fetch${array.join(\"\")}`]: () => async (dispatch) => {\n          dispatch(dispatchActions[partsKeys[0]]());\n          await api\n            .get(API_URL)\n            .then((res) => {\n              console.log(res.data);\n              dispatch(dispatchActions[partsKeys[1]](res.data));\n            })\n            .catch((err) => {\n              dispatch(dispatchActions[partsKeys[2]](err.message));\n            });\n        },\n      };\n      index = index + slice;\n    }\n  });\n\n  console.log(dataFns, \"fffffffffff\");\n  return dataFns;\n}; */\n/* export const dispatchActionsWithGetById = (data) => {\n  const dispatchActions = prepareActions(data);\n  let dataFns = {};\n  const slice = 3;\n  data.map((val) => {\n    let index = 0;\n    let array = [];\n    val.split(\"_\").map((val) => {\n      array = [...array, val.charAt(0).toUpperCase() + val.slice(1)];\n    });\n    //val = val.charAt(0).toUpperCase() + val.slice(1);\n    while (index < keys(dispatchActions).length) {\n      const partsKeys = keys(dispatchActions).splice(index, slice);\n      dataFns = {\n        ...dataFns,\n        [`fetch${array.join(\"\")}`]: (API_URL) => async (dispatch) => {\n          dispatch(dispatchActions[partsKeys[0]]());\n          await api\n            .get(API_URL)\n            .then((res) => {\n              dispatch(dispatchActions[partsKeys[1]](res.data));\n            })\n            .catch((err) => {\n              dispatch(dispatchActions[partsKeys[2]](err.message));\n            });\n        },\n      };\n      index = index + slice;\n    }\n  });\n  return dataFns;\n};\n */\n","import { has } from 'lodash'\nimport { handleActions } from 'redux-actions'\n\nexport const actionsCondition = (data) => {\n  let reducerMap = {}\n  let initialState = {}\n  data.map((val) => {\n    const { key, stateKey, initStateKey, fn } = val\n    const newVal = key.replace(/[A-Z]/g, (m) => '_' + m).toUpperCase()\n    initialState = {\n      ...initialState,\n      [stateKey]: initStateKey,\n      [`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: false\n    }\n    reducerMap = {\n      ...reducerMap,\n      [newVal]: {\n        next: (state, action) => {\n          if (has(val, 'fn')) {\n            return {\n              ...state,\n              [stateKey]: fn(state, action)\n            }\n          } else {\n            return {\n              ...state,\n              [stateKey]: action?.payload\n            }\n          }\n        }\n      },\n      [`START_LOADING_${newVal}`]: {\n        next: (state, action) => {\n          return {\n            ...state,\n            [`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: true\n          }\n        }\n      },\n      [`STOP_LOADING_${newVal}`]: {\n        next: (state, action) => {\n          return {\n            ...state,\n            [`loading${key.charAt(0).toUpperCase() + key.slice(1)}`]: false\n          }\n        }\n      }\n    }\n  })\n  return handleActions(reducerMap, initialState)\n}\n/* export const loadData =(key)=>(state, action) => {\n   return { \n        ...state,\n        [key]: action.payload\n    }\n}; */\n","import { dispatchActionsWithApi } from 'fasti-redux'\nexport const GET_POSTS = 'GET POSTS'\nexport const START_LOADING_GET_POSTS = 'START_LOADING_GET_POSTS'\nexport const STOP_LOADING_GET_POSTS = 'STOP_LOADING_GET_POSTS'\n\n/* export const startLoadingPosts = () => ({\n  type: START_LOADING_GET_POSTS,\n  payload: true\n})\nexport const stopLoadingPosts = () => ({\n  type: STOP_LOADING_GET_POSTS,\n  payload: true\n})\nexport const getPosts = (posts) => ({\n  type: GET_POSTS,\n  payload: posts\n})\n\nexport function getPostsAction() {\n  return async (dispatch) => {\n    dispatch(startLoadingPosts())\n\n    try {\n      const response = await fetch('https://jsonplaceholder.typicode.com/posts')\n      const data = await response.json()\n\n      dispatch(getPosts(data))\n    } catch (error) {\n      dispatch(stopLoadingPosts())\n    }\n    dispatch(stopLoadingPosts())\n  }\n} */\n/* Became To like this */\nconst API_POSTS_URL = 'https://jsonplaceholder.typicode.com/posts'\nexport const { getPostsAction } = dispatchActionsWithApi([\n  {\n    name: 'getPosts',\n    url: API_POSTS_URL,\n    method: 'get'\n  }\n])\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport const Post = ({ post, excerpt }) => (\n  <article className={excerpt ? 'post-excerpt' : 'post'}>\n    <h2>{post.title}</h2>\n    <p>{excerpt ? post.body.substring(0, 100) : post.body}</p>\n\n    {excerpt && (\n      <Link to={`/posts/${post.id}`} className=\"button\">\n        View Post\n      </Link>\n    )}\n  </article>\n)\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { getPostsAction } from '../actions/postsActions'\n\nimport { Post } from '../components/Post'\n\nconst PostsPage = () => {\n  const dispatch = useDispatch()\n  const loadingGetPosts = useSelector((state) => state.posts.loadingGetPosts)\n  const posts = useSelector((state) => state.posts.posts)\n  useEffect(() => {\n    dispatch(getPostsAction())\n    //dispatch(getPostsAction())\n  }, [dispatch])\n\n  const renderPosts = () => {\n    if (loadingGetPosts) return <p>Loading posts...</p>\n    return posts.map((post) => <Post key={post.id} post={post} excerpt />)\n  }\n\n  return (\n    <section>\n      <h1>Posts</h1>\n      {renderPosts()}\n    </section>\n  )\n}\n\n/* const mapStateToProps = (state) => ({\n  loading: state.posts.loading,\n  posts: state.posts.posts,\n  hasErrors: state.posts.hasErrors\n}) */\n\nexport default PostsPage\n","import { dispatchActionsWithApi } from 'fasti-redux'\n\n/* export const GET_POST = 'GET POST'\nexport const START_LOADING_GET_POST = 'START_LOADING_GET_POST'\nexport const STOP_LOADING_GET_POST = 'STOP_LOADING_GET_POST'\n\nexport const startLoadingPost = () => ({\n  type: START_LOADING_GET_POST,\n  payload: true\n})\nexport const stopLoadingPost = () => ({\n  type: STOP_LOADING_GET_POST,\n  payload: false\n})\nexport const getPost = (post) => ({\n  type: GET_POST,\n  payload: post\n})\n\nexport function getPostAction(id) {\n  return async (dispatch) => {\n    dispatch(startLoadingPost())\n\n    try {\n      const response = await fetch(\n        `https://jsonplaceholder.typicode.com/posts/${id}`\n      )\n      const data = await response.json()\n\n      dispatch(getPost(data))\n    } catch (error) {\n      dispatch(stopLoadingPost())\n    }\n    dispatch(stopLoadingPost())\n  }\n} */\n/* Became To like this */\nconst API_POST_URL = `https://jsonplaceholder.typicode.com/posts/[id]`\nexport const { getPostAction } = dispatchActionsWithApi([\n  {\n    name: 'getPost',\n    url: API_POST_URL,\n    method: 'get'\n  }\n])\n","import { dispatchActionsWithApi } from 'fasti-redux'\n/* \n\nexport const GET_COMMENTS = 'GET_COMMENTS'\nexport const START_LOADING_GET_COMMENTS = 'START_LOADING_GET_COMMENTS'\nexport const STOP_LOADING_GET_COMMENTS = 'STOP_LOADING_GET_COMMENTS'\nexport const startLoadingComments = () => ({\n  type: START_LOADING_GET_COMMENTS,\n  payload: true\n})\nexport const stopLoadingComments = () => ({\n  type: STOP_LOADING_GET_COMMENTS,\n  payload: true\n})\nexport const getComments = (comments) => ({\n  type: GET_COMMENTS,\n  payload: comments\n})\n\nexport function getCommentsAction(postId) {\n  return async (dispatch) => {\n    dispatch(startLoadingComments())\n\n    try {\n      const response = await fetch(\n        `https://jsonplaceholder.typicode.com/comments?postId=${postId}`\n      )\n      const data = await response.json()\n\n      dispatch(getComments(data))\n    } catch (error) {\n      dispatch(stopLoadingComments())\n    }\n    dispatch(stopLoadingComments())\n  }\n} */\n/* Became To like this */\nconst API_COMMENTS_URL = `https://jsonplaceholder.typicode.com/comments?postId=[postId]`\nexport const { getCommentsAction } = dispatchActionsWithApi([\n  {\n    name: 'getComments',\n    url: API_COMMENTS_URL,\n    method: 'get'\n  }\n])\n","import React from 'react'\n\nexport const Comment = ({ comment }) => (\n  <aside className=\"comment\">\n    <h2>{comment.title}</h2>\n    <h3>{comment.email}</h3>\n    <p>{comment.body}</p>\n  </aside>\n)\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { getPostAction } from '../actions/postActions'\nimport { getCommentsAction } from '../actions/commentsActions'\n\nimport { Post } from '../components/Post'\nimport { Comment } from '../components/Comment'\n\nconst SinglePostPage = ({ match }) => {\n  const dispatch = useDispatch()\n  const loading = useSelector((state) => {\n    return { post: state.post.loadingGetPost, comments: state.comments.loading }\n  })\n  const state = useSelector((state) => state)\n  const post = useSelector((state) => state.post.post)\n  const comments = useSelector((state) => state.comments.comments)\n  useEffect(() => {\n    const { id } = match.params\n\n    //dispatch(getPostAction(id))\n    //dispatch(getCommentsAction(id))\n    dispatch(getPostAction({ params: { id } }))\n    dispatch(getCommentsAction({ params: { postId: id } }))\n  }, [dispatch, match])\n\n  const renderPost = () => {\n    if (loading.post) return <p>Loading post...</p>\n    return <Post post={post} />\n  }\n\n  const renderComments = () => {\n    if (loading.comments) return <p>Loading comments...</p>\n    return comments.map((comment) => (\n      <Comment key={comment.id} comment={comment} />\n    ))\n  }\n\n  return (\n    <section>\n      {console.log(state)}\n      {renderPost()}\n      <h2>Comments</h2>\n      {renderComments()}\n    </section>\n  )\n}\n\nexport default SinglePostPage\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from 'react-router-dom'\n\nimport { Navbar } from './components/Navbar'\nimport DashboardPage from './pages/DashboardPage'\nimport PostsPage from './pages/PostsPage'\nimport SinglePostPage from './pages/SinglePostPage'\n\nconst App = () => {\n  return (\n    <Router>\n      <Navbar />\n      <Switch>\n        <Route exact path='/' component={DashboardPage} />\n        <Route exact path='/posts' component={PostsPage} />\n        <Route exact path='/posts/:id' component={SinglePostPage} />\n        <Redirect to='/' />\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","import * as actions from '../actions/postsActions'\nimport { actionsCondition } from 'fasti-redux'\n\n/* export const initialState = {\n  loadingGetPosts: false,\n  posts: []\n}\n\nexport default function postsReducer(state = initialState, action) {\n  switch (action.type) {\n    case actions.START_LOADING_GET_POSTS:\n      return { ...state, loadingGetPosts: true }\n    case actions.GET_POSTS:\n      return { posts: action.payload, loading: false }\n    case actions.STOP_LOADING_GET_POSTS:\n      return { ...state, loadingGetPosts: false }\n    default:\n      return state\n  }\n} */\n/* ***************** Posts Reducer ***************/\n\nconst postsReducer = actionsCondition([\n  { key: 'getPosts', stateKey: 'posts', initStateKey: [] }\n])\n\nexport default postsReducer\n","import { actionsCondition } from 'fasti-redux'\nimport * as actions from '../actions/postActions'\n\n/* export const initialState = {\n  loadingGetPost: false,\n  post: {}\n}\n\nexport default function postReducer(state = initialState, action) {\n  switch (action.type) {\n    case actions.START_LOADING_GET_POST:\n      return { ...state, loadingGetPost: true }\n    case actions.GET_POST:\n      return { post: action.payload, loading: false }\n    case actions.STOP_LOADING_GET_POST:\n      return { ...state, loadingGetPost: false }\n    default:\n      return state\n  }\n} */\n\n/* ***************** Post Reducer ***************/\n\nconst postReducer = actionsCondition([\n  { key: 'getPost', stateKey: 'post', initStateKey: {} }\n])\n\nexport default postReducer\n","import { actionsCondition } from 'fasti-redux'\nimport * as actions from '../actions/commentsActions'\n/* \nexport const initialState = {\n  loadingGetComments: false,\n  comments: []\n}\n\nexport default function commentsReducer(state = initialState, action) {\n  switch (action.type) {\n    case actions.START_LOADING_GET_COMMENTS:\n      return { ...state, loadingGetComments: true }\n    case actions.GET_COMMENTS:\n      return { comments: action.payload, loading: false }\n    case actions.STOP_LOADING_GET_COMMENTS:\n      return { ...state, loadingGetComments: false }\n    default:\n      return state\n  }\n} */\n/* ***************** Post Reducer ***************/\n\nconst commentsReducer = actionsCondition([\n  { key: 'getComments', stateKey: 'comments', initStateKey: [] }\n])\n\nexport default commentsReducer\n","import { combineReducers } from 'redux'\n\nimport postsReducer from './postsReducer'\nimport postReducer from './postReducer'\nimport commentsReducer from './commentsReducer'\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  post: postReducer,\n  comments: commentsReducer,\n})\n\nexport default rootReducer\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport App from './App'\nimport rootReducer from './reducers'\n\nimport './index.css'\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}